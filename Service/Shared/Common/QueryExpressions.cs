//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A class representing a token in structured query expression.
    /// </summary>
    [DataContract]
    public class QToken
    {
        /// <summary>
        /// The type of the token.
        /// </summary>
        [DataMember]
        public string TkType
        {
            get { return _tkType; }
            set { _tkType = value; }
        }
        private string _tkType = "";

        /// <summary>
        /// The name of the token in the query expression.
        /// </summary>
        [DataMember]
        public string TkName
        {
            get;
            set;
        }

        /// <summary>
        /// The display name of the token shown to the user.
        /// </summary>
        [DataMember]
        public string DisplayAs 
        {
            get;
            set;
        }

        /// <summary>
        /// For internal use only.
        /// </summary>
        [DataMember]
        public bool IsExternal
        {
            get { return _isExternal; }
            set { _isExternal = value; }
        }
        private bool _isExternal = false;

        /// <summary>
        /// For internal use only.
        /// </summary>
        [DataMember]
        public bool IsEntityAccess
        {
            get { return _isEntityAccess; }
            set { _isEntityAccess = value; }
        }
        private bool _isEntityAccess = false;
    }

    /// <summary>
    /// It represents list of possible tokens (see <see cref="QToken" />) that the can be added to the current query expression and the corresponding hints,
    /// if any.
    /// </summary>
    [DataContract]
    public class TokenOptions
    {
        /// <summary>
        /// When options a shown, it provides additional information to the client to make decision.
        /// </summary>
        [DataMember]
        public string Hint
        {
            get;
            set;
        }

        /// <summary>
        /// The current expression under which the options are relevent in a natural language form.
        /// </summary>
        [DataMember]
        public string CurrentExpr
        {
            get;
            set;
        }

        /// <summary>
        /// Internal use only.
        /// </summary>
        [DataMember]
        public bool QuoteVal
        {
            get { return _quoteVal; }
            set { _quoteVal = value; }
        }
        private bool _quoteVal = false;

        /// <summary>
        /// Internal use only.
        /// </summary>
        [DataMember]
        public bool CanBeClosed
        {
            get;
            set;
        }

        /// <summary>
        /// A list of options for clients to select under the current query expression.
        /// </summary>
        [DataMember]
        public List<QToken> Options
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A class representing structured query expression.
    /// </summary>
    [DataContract]
    public class QueryExpresion
    {
        /// <summary>
        /// Internal use only.
        /// </summary>
        public string CacheKey
        {
            get 
            {
                string key = "";
                if (FilterTks != null)
                {
                    foreach (var tk in FilterTks)
                        key += tk.TkName + ":";
                }
                if (OrderTks != null)
                {
                    foreach (var tk in OrderTks)
                        key += tk.TkName + ":";
                }
                return key;
            }
        }

        /// <summary>
        /// A list of tokens representing client filtering request.
        /// </summary>
        [DataMember]
        public List<QToken> FilterTks
        {
            get;
            set;
        }

        /// <summary>
        /// A list of tokens representing client sorting request.
        /// </summary>
        [DataMember]
        public List<QToken> OrderTks
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A class used to specify a filtered change notification subscription.
    /// </summary>
    [DataContract]
    public class SetSubscription
    {
        /// <summary>
        /// The type of data set a subscriber subscibes to change notifications.
        /// </summary>
        [DataMember]
        public EntitySetType EntityType
        {
            get { return _entityType; }
            set { _entityType = value; }
        }
        private EntitySetType _entityType = EntitySetType.Unknown;

        /// <summary>
        /// An optional entity filter used by the service to pre-select entities whose changes notifications will be
        /// sent to the subscriber.
        /// </summary>
        [DataMember]
        public QueryExpresion EntityFilter
        {
            get { return _entityFilter; }
            set { _entityFilter = value; }
        }
        private QueryExpresion _entityFilter = null;
    }

}