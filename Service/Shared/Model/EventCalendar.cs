//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "EventCalendar" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventCalendar.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventCalendar.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateDate</term>
    ///      <description>See <see cref="EventCalendar.CreateDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventDuration</term>
    ///      <description>See <see cref="EventCalendar.EventDuration" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>StartDate</term>
    ///      <description>See <see cref="EventCalendar.StartDate" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>Title</term>
    ///      <description>See <see cref="EventCalendar.Title" />. Editable; not null; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>Description</term>
    ///      <description>See <see cref="EventCalendar.Description" />. Editable; nullable; load delayed; max-length = 2000 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventStatus</term>
    ///      <description>See <see cref="EventCalendar.EventStatus" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>SubTitle</term>
    ///      <description>See <see cref="EventCalendar.SubTitle" />. Editable; nullable; max-length = 200 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="EventCalendar.ApplicationID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>CreatedUserID</term>
    ///      <description>See <see cref="EventCalendar.CreatedUserID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventTypeID</term>
    ///      <description>See <see cref="EventCalendar.EventTypeID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="EventCalendar.GroupID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="EventCalendar.UserID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="EventCalendar.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventTypeRef</term>
    ///      <description>See <see cref="EventCalendar.EventTypeRef" />, which is a member of the data set "EventTypes" for <see cref="EventType" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupRef</term>
    ///      <description>See <see cref="EventCalendar.UserGroupRef" />, which is a member of the data set "UserGroups" for <see cref="UserGroup" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_UserID</term>
    ///      <description>See <see cref="EventCalendar.User_UserID" />, which is a member of the data set "Users" for <see cref="User" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_CreatedUserID</term>
    ///      <description>See <see cref="EventCalendar.User_CreatedUserID" />, which is a member of the data set "Users" for <see cref="User" />. Nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventCalendarShareCircles</term>
    ///      <description>See <see cref="EventCalendar.EventCalendarShareCircles" />, which is a sub-set of the data set "EventCalendarShareCircles" for <see cref="EventCalendarShareCircle" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>NotificationTaskSchedules</term>
    ///      <description>See <see cref="EventCalendar.NotificationTaskSchedules" />, which is a sub-set of the data set "NotificationTaskSchedules" for <see cref="NotificationTaskSchedule" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class EventCalendar : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IEventCalendarService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsEventDurationModified)
                    str += "Modified [EventDuration] = " + EventDuration + "\r\n";
                if (IsStartDateModified)
                    str += "Modified [StartDate] = " + StartDate + "\r\n";
                if (IsTitleModified)
                    str += "Modified [Title] = " + Title + "\r\n";
                if (IsDescriptionModified)
                    str += "Modified [Description] = " + Description + "\r\n";
                if (IsEventStatusModified)
                    str += "Modified [EventStatus] = " + EventStatus + "\r\n";
                if (IsSubTitleModified)
                    str += "Modified [SubTitle] = " + SubTitle + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadEventTypeRef();
            return String.Format(@"[{0}] {1} start at {2} for {3}", (EventTypeRef != null ? EventTypeRef.DistinctString : ""), Title.Trim(), StartDate, EventDuration);
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventCalendar()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public EventCalendar(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventCalendar));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as EventCalendar;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventCalendar));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateDate
        { 
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    _CreateDate = value;
                }
            }
        }
        private DateTime _CreateDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public TimeSpan EventDuration
        { 
            get
            {
                return _EventDuration;
            }
            set
            {
                if (_EventDuration != value)
                {
                    _EventDuration = value;
                    if (StartAutoUpdating)
                        IsEventDurationModified = true;
                }
            }
        }
        private TimeSpan _EventDuration = default(TimeSpan);

        /// <summary>
        /// Wether or not the value of <see cref="EventDuration" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="EventDuration" /> only if this is set to true no matter what
        /// the actual value of <see cref="EventDuration" /> is.
        /// </summary>
        [DataMember]
        public bool IsEventDurationModified
        { 
            get
            {
                return _isEventDurationModified;
            }
            set
            {
                _isEventDurationModified = value;
            }
        }
        private bool _isEventDurationModified = false;

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public DateTime StartDate
        { 
            get
            {
                return _StartDate;
            }
            set
            {
                if (_StartDate != value)
                {
                    _StartDate = value;
                    if (StartAutoUpdating)
                        IsStartDateModified = true;
                }
            }
        }
        private DateTime _StartDate = default(DateTime);

        /// <summary>
        /// Wether or not the value of <see cref="StartDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="StartDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="StartDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsStartDateModified
        { 
            get
            {
                return _isStartDateModified;
            }
            set
            {
                _isStartDateModified = value;
            }
        }
        private bool _isStartDateModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 50 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = true)]
        public string Title
        { 
            get
            {
                return _Title;
            }
            set
            {
                if (_Title != value)
                {
                    _Title = value;
                    if (StartAutoUpdating)
                        IsTitleModified = true;
                }
            }
        }
        private string _Title = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Title" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Title" /> only if this is set to true no matter what
        /// the actual value of <see cref="Title" /> is.
        /// </summary>
        [DataMember]
        public bool IsTitleModified
        { 
            get
            {
                return _isTitleModified;
            }
            set
            {
                _isTitleModified = value;
            }
        }
        private bool _isTitleModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed; max-length = 2000 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(2000)]
        [DataMember(IsRequired = false)]
        public string Description
        { 
            get
            {
                return _Description;
            }
            set
            {
                if (_Description != value)
                {
                    _Description = value;
                    if (StartAutoUpdating)
                        IsDescriptionModified = true;
                    if (StartAutoUpdating)
                        IsDescriptionLoaded = value != null;
                }
            }
        }
        private string _Description = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Description" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Description" /> only if this is set to true no matter what
        /// the actual value of <see cref="Description" /> is.
        /// </summary>
        [DataMember]
        public bool IsDescriptionModified
        { 
            get
            {
                return _isDescriptionModified;
            }
            set
            {
                _isDescriptionModified = value;
            }
        }
        private bool _isDescriptionModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "Description" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsDescriptionLoaded
        { 
            get
            {
                return _isDescriptionLoaded;
            }
            set
            {
                _isDescriptionLoaded = value;
            }
        }
        private bool _isDescriptionLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string EventStatus
        { 
            get
            {
                return _EventStatus;
            }
            set
            {
                if (_EventStatus != value)
                {
                    _EventStatus = value;
                    if (StartAutoUpdating)
                        IsEventStatusModified = true;
                }
            }
        }
        private string _EventStatus = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="EventStatus" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="EventStatus" /> only if this is set to true no matter what
        /// the actual value of <see cref="EventStatus" /> is.
        /// </summary>
        [DataMember]
        public bool IsEventStatusModified
        { 
            get
            {
                return _isEventStatusModified;
            }
            set
            {
                _isEventStatusModified = value;
            }
        }
        private bool _isEventStatusModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 200 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(200)]
        [DataMember(IsRequired = false)]
        public string SubTitle
        { 
            get
            {
                return _SubTitle;
            }
            set
            {
                if (_SubTitle != value)
                {
                    _SubTitle = value;
                    if (StartAutoUpdating)
                        IsSubTitleModified = true;
                }
            }
        }
        private string _SubTitle = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="SubTitle" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="SubTitle" /> only if this is set to true no matter what
        /// the actual value of <see cref="SubTitle" /> is.
        /// </summary>
        [DataMember]
        public bool IsSubTitleModified
        { 
            get
            {
                return _isSubTitleModified;
            }
            set
            {
                _isSubTitleModified = value;
            }
        }
        private bool _isSubTitleModified = false;

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string CreatedUserID
        { 
            get
            {
                return _CreatedUserID;
            }
            set
            {
                if (_CreatedUserID != value)
                {
                    _CreatedUserID = value;
                }
            }
        }
        private string _CreatedUserID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public System.Nullable<int> EventTypeID
        { 
            get
            {
                return _EventTypeID;
            }
            set
            {
                if (_EventTypeID != value)
                {
                    _EventTypeID = value;
                }
            }
        }
        private System.Nullable<int> _EventTypeID = default(System.Nullable<int>);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string GroupID
        { 
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    _GroupID = value;
                }
            }
        }
        private string _GroupID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string UserID
        { 
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                }
            }
        }
        private string _UserID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventCalendar.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (ApplicationID == null)
                    return null;
                else if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="EventCalendar.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventCalendar.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (ApplicationID == null || _Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "EventTypes" for <see cref="EventType" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventCalendar.EventTypeID" /> }.
        /// </summary>
        [DataMember]
        public EventType EventTypeRef
        {
            get 
            {
                if (EventTypeID == null)
                    return null;
                else if (_EventTypeRef == null && AutoLoadEventTypeRef != null)
                    _EventTypeRef = AutoLoadEventTypeRef();
                return _EventTypeRef; 
            }
            set 
            { 
                _EventTypeRef = value; 
            }
        }
        private EventType _EventTypeRef = null;

        /// <summary>
        /// <see cref="EventCalendar.EventTypeRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventCalendar.DelLoadEventTypeRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadEventTypeRef()
        {
            if (EventTypeID == null || _EventTypeRef != null)
                return;
            if (DelLoadEventTypeRef != null)
                _EventTypeRef = DelLoadEventTypeRef();
        }

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.EventTypeRef" />.
        /// </summary>
        public Func<EventType> DelLoadEventTypeRef = null;

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.EventTypeRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<EventType> AutoLoadEventTypeRef = null;

        /// <summary>
        /// Entity in data set "UserGroups" for <see cref="UserGroup" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventCalendar.GroupID" /> }.
        /// </summary>
        [DataMember]
        public UserGroup UserGroupRef
        {
            get 
            {
                if (GroupID == null)
                    return null;
                else if (_UserGroupRef == null && AutoLoadUserGroupRef != null)
                    _UserGroupRef = AutoLoadUserGroupRef();
                return _UserGroupRef; 
            }
            set 
            { 
                _UserGroupRef = value; 
            }
        }
        private UserGroup _UserGroupRef = null;

        /// <summary>
        /// <see cref="EventCalendar.UserGroupRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventCalendar.DelLoadUserGroupRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserGroupRef()
        {
            if (GroupID == null || _UserGroupRef != null)
                return;
            if (DelLoadUserGroupRef != null)
                _UserGroupRef = DelLoadUserGroupRef();
        }

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.UserGroupRef" />.
        /// </summary>
        public Func<UserGroup> DelLoadUserGroupRef = null;

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.UserGroupRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroup> AutoLoadUserGroupRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventCalendar.UserID" /> }.
        /// </summary>
        [DataMember]
        public User User_UserID
        {
            get 
            {
                if (UserID == null)
                    return null;
                else if (_User_UserID == null && AutoLoadUser_UserID != null)
                    _User_UserID = AutoLoadUser_UserID();
                return _User_UserID; 
            }
            set 
            { 
                _User_UserID = value; 
            }
        }
        private User _User_UserID = null;

        /// <summary>
        /// <see cref="EventCalendar.User_UserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventCalendar.DelLoadUser_UserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_UserID()
        {
            if (UserID == null || _User_UserID != null)
                return;
            if (DelLoadUser_UserID != null)
                _User_UserID = DelLoadUser_UserID();
        }

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.User_UserID" />.
        /// </summary>
        public Func<User> DelLoadUser_UserID = null;

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.User_UserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_UserID = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventCalendar.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
        public User User_CreatedUserID
        {
            get 
            {
                if (CreatedUserID == null)
                    return null;
                else if (_User_CreatedUserID == null && AutoLoadUser_CreatedUserID != null)
                    _User_CreatedUserID = AutoLoadUser_CreatedUserID();
                return _User_CreatedUserID; 
            }
            set 
            { 
                _User_CreatedUserID = value; 
            }
        }
        private User _User_CreatedUserID = null;

        /// <summary>
        /// <see cref="EventCalendar.User_CreatedUserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventCalendar.DelLoadUser_CreatedUserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_CreatedUserID()
        {
            if (CreatedUserID == null || _User_CreatedUserID != null)
                return;
            if (DelLoadUser_CreatedUserID != null)
                _User_CreatedUserID = DelLoadUser_CreatedUserID();
        }

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.User_CreatedUserID" />.
        /// </summary>
        public Func<User> DelLoadUser_CreatedUserID = null;

        /// <summary>
        /// A delegate to load <see cref="EventCalendar.User_CreatedUserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_CreatedUserID = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="EventCalendarShareCircleSet" /> for data set "EventCalendarShareCircles" of <see cref="EventCalendarShareCircle" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarShareCircleSet" /> set is { <see cref="EventCalendarShareCircle.EventID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendarShareCircleSet EventCalendarShareCircles
		{
			get
			{
                if (_EventCalendarShareCircles == null)
                    _EventCalendarShareCircles = new EventCalendarShareCircleSet();
				return _EventCalendarShareCircles;
			}
            set
            {
                _EventCalendarShareCircles = value;
            }
		}
		private EventCalendarShareCircleSet _EventCalendarShareCircles = null;

        /// <summary>
        /// Entitites enumeration expression for data set "EventCalendarShareCircles" of <see cref="EventCalendarShareCircle" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarShareCircleSet" /> set is { <see cref="EventCalendarShareCircle.EventID" /> }.
        /// </summary>
		public IEnumerable<EventCalendarShareCircle> EventCalendarShareCircleEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="EventCalendarShareCircle" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarShareCircleSet" /> set is { <see cref="EventCalendarShareCircle.EventID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendarShareCircle[] ChangedEventCalendarShareCircles
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="NotificationTaskScheduleSet" /> for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.EventID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskScheduleSet NotificationTaskSchedules
		{
			get
			{
                if (_NotificationTaskSchedules == null)
                    _NotificationTaskSchedules = new NotificationTaskScheduleSet();
				return _NotificationTaskSchedules;
			}
            set
            {
                _NotificationTaskSchedules = value;
            }
		}
		private NotificationTaskScheduleSet _NotificationTaskSchedules = null;

        /// <summary>
        /// Entitites enumeration expression for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.EventID" /> }.
        /// </summary>
		public IEnumerable<NotificationTaskSchedule> NotificationTaskScheduleEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="NotificationTaskSchedule" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.EventID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskSchedule[] ChangedNotificationTaskSchedules
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(EventCalendar other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(EventCalendar other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(EventCalendar from, EventCalendar to)
        {
            if (to.IsPersisted)
            {
                if (from.IsEventDurationModified && !to.IsEventDurationModified)
                {
                    to.EventDuration = from.EventDuration;
                    to.IsEventDurationModified = true;
                }
                if (from.IsStartDateModified && !to.IsStartDateModified)
                {
                    to.StartDate = from.StartDate;
                    to.IsStartDateModified = true;
                }
                if (from.IsTitleModified && !to.IsTitleModified)
                {
                    to.Title = from.Title;
                    to.IsTitleModified = true;
                }
                if (from.IsDescriptionModified && !to.IsDescriptionModified)
                {
                    to.Description = from.Description;
                    to.IsDescriptionModified = true;
                }
                if (from.IsEventStatusModified && !to.IsEventStatusModified)
                {
                    to.EventStatus = from.EventStatus;
                    to.IsEventStatusModified = true;
                }
                if (from.IsSubTitleModified && !to.IsSubTitleModified)
                {
                    to.SubTitle = from.SubTitle;
                    to.IsSubTitleModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.CreateDate = from.CreateDate;
                to.EventDuration = from.EventDuration;
                to.IsEventDurationModified = from.IsEventDurationModified;
                to.StartDate = from.StartDate;
                to.IsStartDateModified = from.IsStartDateModified;
                to.Title = from.Title;
                to.IsTitleModified = from.IsTitleModified;
                to.Description = from.Description;
                to.IsDescriptionModified = from.IsDescriptionModified;
                to.EventStatus = from.EventStatus;
                to.IsEventStatusModified = from.IsEventStatusModified;
                to.SubTitle = from.SubTitle;
                to.IsSubTitleModified = from.IsSubTitleModified;
                to.ApplicationID = from.ApplicationID;
                to.CreatedUserID = from.CreatedUserID;
                to.EventTypeID = from.EventTypeID;
                to.GroupID = from.GroupID;
                to.UserID = from.UserID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(EventCalendar newdata)
        {
            int cnt = 0;
            if (EventDuration != newdata.EventDuration)
            {
                EventDuration = newdata.EventDuration;
                IsEventDurationModified = true;
                cnt++;
            }
            if (StartDate != newdata.StartDate)
            {
                StartDate = newdata.StartDate;
                IsStartDateModified = true;
                cnt++;
            }
            if (Title != newdata.Title)
            {
                Title = newdata.Title;
                IsTitleModified = true;
                cnt++;
            }
            if (Description != newdata.Description)
            {
                Description = newdata.Description;
                IsDescriptionModified = true;
                cnt++;
            }
            if (EventStatus != newdata.EventStatus)
            {
                EventStatus = newdata.EventStatus;
                IsEventStatusModified = true;
                cnt++;
            }
            if (SubTitle != newdata.SubTitle)
            {
                SubTitle = newdata.SubTitle;
                IsSubTitleModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (Title == null)
                Title = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsEventDurationModified || IsStartDateModified || IsTitleModified || IsDescriptionModified || IsEventStatusModified || IsSubTitleModified;
            if (IsDescriptionModified && !IsDescriptionLoaded)
                IsDescriptionLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public EventCalendar ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            EventCalendar e = new EventCalendar();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.CreateDate = CreateDate;
            e.EventDuration = EventDuration;
            if (preserveState)
                e.IsEventDurationModified = IsEventDurationModified;
            else
                e.IsEventDurationModified = false;
            e.StartDate = StartDate;
            if (preserveState)
                e.IsStartDateModified = IsStartDateModified;
            else
                e.IsStartDateModified = false;
            e.Title = Title;
            if (preserveState)
                e.IsTitleModified = IsTitleModified;
            else
                e.IsTitleModified = false;
            e.EventStatus = EventStatus;
            if (preserveState)
                e.IsEventStatusModified = IsEventStatusModified;
            else
                e.IsEventStatusModified = false;
            e.SubTitle = SubTitle;
            if (preserveState)
                e.IsSubTitleModified = IsSubTitleModified;
            else
                e.IsSubTitleModified = false;
            e.ApplicationID = ApplicationID;
            e.CreatedUserID = CreatedUserID;
            e.EventTypeID = EventTypeID;
            e.GroupID = GroupID;
            e.UserID = UserID;
            if (allData)
            {
                if (!checkLoadState || IsDescriptionLoaded)
                    e.Description = Description;
                if (preserveState)
                    e.IsDescriptionModified = IsDescriptionModified;
                else
                    e.IsDescriptionModified = false;
                e.IsDescriptionLoaded = IsDescriptionLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[EventCalendar]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreateDate = " + CreateDate + @"
  EventDuration = " + EventDuration + @"");
            if (IsEventDurationModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  StartDate = " + StartDate + @"");
            if (IsStartDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Title = '" + Title + @"'");
            if (IsTitleModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  EventStatus = '" + (EventStatus != null ? EventStatus : "null") + @"'");
            if (IsEventStatusModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  SubTitle = '" + (SubTitle != null ? SubTitle : "null") + @"'");
            if (IsSubTitleModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ApplicationID = '" + (ApplicationID != null ? ApplicationID : "null") + @"'
  CreatedUserID = '" + (CreatedUserID != null ? CreatedUserID : "null") + @"'
  EventTypeID = " + (EventTypeID.HasValue ? EventTypeID.Value.ToString() : "null") + @"
  GroupID = '" + (GroupID != null ? GroupID : "null") + @"'
  UserID = '" + (UserID != null ? UserID : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="EventCalendar" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class EventCalendarUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public EventCalendar UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public EventCalendar ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
