//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "ShortMessageAudiences" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MsgID</term>
    ///      <description>See <see cref="ShortMessageAudience.MsgID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="ShortMessageAudience.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MsgID</term>
    ///      <description>See <see cref="ShortMessageAudience.MsgID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="ShortMessageAudience.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>VoteCount</term>
    ///      <description>See <see cref="ShortMessageAudience.VoteCount" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>LockIt</term>
    ///      <description>See <see cref="ShortMessageAudience.LockIt" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MsgID</term>
    ///      <description>See <see cref="ShortMessageAudience.MsgID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="ShortMessageAudience.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ShortMessageRef</term>
    ///      <description>See <see cref="ShortMessageAudience.ShortMessageRef" />, which is a member of the data set "ShortMessages" for <see cref="ShortMessage" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserRef</term>
    ///      <description>See <see cref="ShortMessageAudience.UserRef" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class ShortMessageAudience : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.MsgID + ":" + this.UserID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IShortMessageAudienceService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "MsgID = " + MsgID + "\r\n";
                str += "UserID = " + UserID + "\r\n";
                if (IsVoteCountModified)
                    str += "Modified [VoteCount] = " + VoteCount + "\r\n";
                if (IsLockItModified)
                    str += "Modified [LockIt] = " + LockIt + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"MsgID = {0}, UserID = {1}", MsgID.Trim(), UserID.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ShortMessageAudience()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public ShortMessageAudience(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageAudience));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as ShortMessageAudience;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageAudience));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string MsgID
        { 
            get
            {
                return _MsgID;
            }
            set
            {
                if (_MsgID != value)
                {
                    _MsgID = value;
                }
            }
        }
        private string _MsgID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string UserID
        { 
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                }
            }
        }
        private string _UserID = default(string);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public int VoteCount
        { 
            get
            {
                return _VoteCount;
            }
            set
            {
                if (_VoteCount != value)
                {
                    _VoteCount = value;
                    if (StartAutoUpdating)
                        IsVoteCountModified = true;
                }
            }
        }
        private int _VoteCount = default(int);

        /// <summary>
        /// Wether or not the value of <see cref="VoteCount" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="VoteCount" /> only if this is set to true no matter what
        /// the actual value of <see cref="VoteCount" /> is.
        /// </summary>
        [DataMember]
        public bool IsVoteCountModified
        { 
            get
            {
                return _isVoteCountModified;
            }
            set
            {
                _isVoteCountModified = value;
            }
        }
        private bool _isVoteCountModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> LockIt
        { 
            get
            {
                return _LockIt;
            }
            set
            {
                if (_LockIt != value)
                {
                    _LockIt = value;
                    if (StartAutoUpdating)
                        IsLockItModified = true;
                }
            }
        }
        private System.Nullable<bool> _LockIt = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="LockIt" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LockIt" /> only if this is set to true no matter what
        /// the actual value of <see cref="LockIt" /> is.
        /// </summary>
        [DataMember]
        public bool IsLockItModified
        { 
            get
            {
                return _isLockItModified;
            }
            set
            {
                _isLockItModified = value;
            }
        }
        private bool _isLockItModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "ShortMessages" for <see cref="ShortMessage" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessageAudience.MsgID" /> }.
        /// </summary>
        [DataMember]
        public ShortMessage ShortMessageRef
        {
            get 
            {
                if (_ShortMessageRef == null && AutoLoadShortMessageRef != null)
                    _ShortMessageRef = AutoLoadShortMessageRef();
                return _ShortMessageRef; 
            }
            set 
            { 
                _ShortMessageRef = value; 
            }
        }
        private ShortMessage _ShortMessageRef = null;

        /// <summary>
        /// <see cref="ShortMessageAudience.ShortMessageRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessageAudience.DelLoadShortMessageRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadShortMessageRef()
        {
            if (_ShortMessageRef != null)
                return;
            if (DelLoadShortMessageRef != null)
                _ShortMessageRef = DelLoadShortMessageRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAudience.ShortMessageRef" />.
        /// </summary>
        public Func<ShortMessage> DelLoadShortMessageRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAudience.ShortMessageRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<ShortMessage> AutoLoadShortMessageRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessageAudience.UserID" /> }.
        /// </summary>
        [DataMember]
        public User UserRef
        {
            get 
            {
                if (_UserRef == null && AutoLoadUserRef != null)
                    _UserRef = AutoLoadUserRef();
                return _UserRef; 
            }
            set 
            { 
                _UserRef = value; 
            }
        }
        private User _UserRef = null;

        /// <summary>
        /// <see cref="ShortMessageAudience.UserRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessageAudience.DelLoadUserRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserRef()
        {
            if (_UserRef != null)
                return;
            if (DelLoadUserRef != null)
                _UserRef = DelLoadUserRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAudience.UserRef" />.
        /// </summary>
        public Func<User> DelLoadUserRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAudience.UserRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUserRef = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(ShortMessageAudience other)
        {
            if (other == null)
                return false;
            if (MsgID != other.MsgID)
                return false;
            if (UserID != other.UserID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(ShortMessageAudience other)
        {
            if (other == null)
                return false;
            else
                return MsgID == other.MsgID &&  UserID == other.UserID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(ShortMessageAudience from, ShortMessageAudience to)
        {
            if (to.IsPersisted)
            {
                if (from.IsVoteCountModified && !to.IsVoteCountModified)
                {
                    to.VoteCount = from.VoteCount;
                    to.IsVoteCountModified = true;
                }
                if (from.IsLockItModified && !to.IsLockItModified)
                {
                    to.LockIt = from.LockIt;
                    to.IsLockItModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.MsgID = from.MsgID;
                to.UserID = from.UserID;
                to.VoteCount = from.VoteCount;
                to.IsVoteCountModified = from.IsVoteCountModified;
                to.LockIt = from.LockIt;
                to.IsLockItModified = from.IsLockItModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(ShortMessageAudience newdata)
        {
            int cnt = 0;
            if (VoteCount != newdata.VoteCount)
            {
                VoteCount = newdata.VoteCount;
                IsVoteCountModified = true;
                cnt++;
            }
            if (LockIt != newdata.LockIt)
            {
                LockIt = newdata.LockIt;
                IsLockItModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (!IsEntityChanged)
                IsEntityChanged = IsVoteCountModified || IsLockItModified;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public ShortMessageAudience ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            ShortMessageAudience e = new ShortMessageAudience();
            e.StartAutoUpdating = false;
            e.MsgID = MsgID;
            e.UserID = UserID;
            e.VoteCount = VoteCount;
            if (preserveState)
                e.IsVoteCountModified = IsVoteCountModified;
            else
                e.IsVoteCountModified = false;
            e.LockIt = LockIt;
            if (preserveState)
                e.IsLockItModified = IsLockItModified;
            else
                e.IsLockItModified = false;
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[ShortMessageAudience]] =====----
  MsgID = '" + MsgID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  UserID = '" + UserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  VoteCount = " + VoteCount + @"");
            if (IsVoteCountModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LockIt = " + (LockIt.HasValue ? LockIt.Value.ToString() : "null") + @"");
            if (IsLockItModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="ShortMessageAudience" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class ShortMessageAudienceUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public ShortMessageAudience UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public ShortMessageAudience ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
