//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "ShortMessages" data set. The set is a self-referencing hierarchic one.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="ShortMessage.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="ShortMessage.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreatedDate</term>
    ///      <description>See <see cref="ShortMessage.CreatedDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MsgText</term>
    ///      <description>See <see cref="ShortMessage.MsgText" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>IsNotReceived</term>
    ///      <description>See <see cref="ShortMessage.IsNotReceived" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastModified</term>
    ///      <description>See <see cref="ShortMessage.LastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>MsgData</term>
    ///      <description>See <see cref="ShortMessage.MsgData" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>MsgDataLastModified</term>
    ///      <description>See <see cref="ShortMessage.MsgDataLastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>MsgDataLink</term>
    ///      <description>See <see cref="ShortMessage.MsgDataLink" />. Editable; nullable; max-length = 150 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>MsgDataMime</term>
    ///      <description>See <see cref="ShortMessage.MsgDataMime" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>MsgTitle</term>
    ///      <description>See <see cref="ShortMessage.MsgTitle" />. Editable; nullable; max-length = 150 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="ShortMessage.ApplicationID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>FromID</term>
    ///      <description>See <see cref="ShortMessage.FromID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>TypeID</term>
    ///      <description>See <see cref="ShortMessage.TypeID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="ShortMessage.GroupID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ReplyToID</term>
    ///      <description>See <see cref="ShortMessage.ReplyToID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToID</term>
    ///      <description>See <see cref="ShortMessage.ToID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="ShortMessage.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UpperRef</term>
    ///      <description>See <see cref="ShortMessage.UpperRef" />, which is a member of the data set "ShortMessages" for <see cref="ShortMessage" />. Self-referencing. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>ShortMessageTypeRef</term>
    ///      <description>See <see cref="ShortMessage.ShortMessageTypeRef" />, which is a member of the data set "ShortMessageTypes" for <see cref="ShortMessageType" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupRef</term>
    ///      <description>See <see cref="ShortMessage.UserGroupRef" />, which is a member of the data set "UserGroups" for <see cref="UserGroup" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_FromID</term>
    ///      <description>See <see cref="ShortMessage.User_FromID" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_ToID</term>
    ///      <description>See <see cref="ShortMessage.User_ToID" />, which is a member of the data set "Users" for <see cref="User" />. Nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ShortMessageAttachments</term>
    ///      <description>See <see cref="ShortMessage.ShortMessageAttachments" />, which is a sub-set of the data set "ShortMessageAttachments" for <see cref="ShortMessageAttachment" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>ShortMessageAudiences</term>
    ///      <description>See <see cref="ShortMessage.ShortMessageAudiences" />, which is a sub-set of the data set "ShortMessageAudiences" for <see cref="ShortMessageAudience" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>ShortMessages</term>
    ///      <description>See <see cref="ShortMessage.ShortMessages" />, which is a sub-set of the data set "ShortMessages" for <see cref="ShortMessage" />. Self-referencing.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class ShortMessage : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IShortMessageService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsMsgTextModified)
                    str += "Modified [MsgText] = " + MsgText + "\r\n";
                if (IsIsNotReceivedModified)
                    str += "Modified [IsNotReceived] = " + IsNotReceived + "\r\n";
                if (IsLastModifiedModified)
                    str += "Modified [LastModified] = " + LastModified + "\r\n";
                if (IsMsgDataModified)
                    str += "Modified [MsgData] = " + MsgData + "\r\n";
                if (IsMsgDataLastModifiedModified)
                    str += "Modified [MsgDataLastModified] = " + MsgDataLastModified + "\r\n";
                if (IsMsgDataLinkModified)
                    str += "Modified [MsgDataLink] = " + MsgDataLink + "\r\n";
                if (IsMsgDataMimeModified)
                    str += "Modified [MsgDataMime] = " + MsgDataMime + "\r\n";
                if (IsMsgTitleModified)
                    str += "Modified [MsgTitle] = " + MsgTitle + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"ID = {0}", ID.Trim());
        }

        /// <summary>
        /// Get the full path of an entity in a self-referencing set.
        /// </summary>
        /// <param name="sep">The node separator to be used.</param>
        /// <returns>
        ///   The full path.
        /// </returns>
        public string GetFullEntityPath(string sep)
        {
            string pstr = GetDistinctString(false);
            LoadUpperRef();
            ShortMessage e = UpperRef;
            while (e != null)
            {
                pstr = e.GetDistinctString(false) + sep + pstr.TrimStart(sep.ToCharArray());
                e = e.UpperRef;
            }
            return pstr;
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ShortMessage()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public ShortMessage(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessage));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as ShortMessage;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessage));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreatedDate
        { 
            get
            {
                return _CreatedDate;
            }
            set
            {
                if (_CreatedDate != value)
                {
                    _CreatedDate = value;
                }
            }
        }
        private DateTime _CreatedDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public string MsgText
        { 
            get
            {
                return _MsgText;
            }
            set
            {
                if (_MsgText != value)
                {
                    _MsgText = value;
                    if (StartAutoUpdating)
                        IsMsgTextModified = true;
                }
            }
        }
        private string _MsgText = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="MsgText" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgText" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgText" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgTextModified
        { 
            get
            {
                return _isMsgTextModified;
            }
            set
            {
                _isMsgTextModified = value;
            }
        }
        private bool _isMsgTextModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> IsNotReceived
        { 
            get
            {
                return _IsNotReceived;
            }
            set
            {
                if (_IsNotReceived != value)
                {
                    _IsNotReceived = value;
                    if (StartAutoUpdating)
                        IsIsNotReceivedModified = true;
                }
            }
        }
        private System.Nullable<bool> _IsNotReceived = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="IsNotReceived" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IsNotReceived" /> only if this is set to true no matter what
        /// the actual value of <see cref="IsNotReceived" /> is.
        /// </summary>
        [DataMember]
        public bool IsIsNotReceivedModified
        { 
            get
            {
                return _isIsNotReceivedModified;
            }
            set
            {
                _isIsNotReceivedModified = value;
            }
        }
        private bool _isIsNotReceivedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastModified
        { 
            get
            {
                return _LastModified;
            }
            set
            {
                if (_LastModified != value)
                {
                    _LastModified = value;
                    if (StartAutoUpdating)
                        IsLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastModifiedModified
        { 
            get
            {
                return _isLastModifiedModified;
            }
            set
            {
                _isLastModifiedModified = value;
            }
        }
        private bool _isLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public byte[] MsgData
        { 
            get
            {
                return _MsgData;
            }
            set
            {
                if (_MsgData != value)
                {
                    _MsgData = value;
                    if (StartAutoUpdating)
                        IsMsgDataModified = true;
                    if (StartAutoUpdating)
                        IsMsgDataLoaded = value != null;
                }
            }
        }
        private byte[] _MsgData = default(byte[]);

        /// <summary>
        /// Wether or not the value of <see cref="MsgData" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgData" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgData" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgDataModified
        { 
            get
            {
                return _isMsgDataModified;
            }
            set
            {
                _isMsgDataModified = value;
            }
        }
        private bool _isMsgDataModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "MsgData" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsMsgDataLoaded
        { 
            get
            {
                return _isMsgDataLoaded;
            }
            set
            {
                _isMsgDataLoaded = value;
            }
        }
        private bool _isMsgDataLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> MsgDataLastModified
        { 
            get
            {
                return _MsgDataLastModified;
            }
            set
            {
                if (_MsgDataLastModified != value)
                {
                    _MsgDataLastModified = value;
                    if (StartAutoUpdating)
                        IsMsgDataLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _MsgDataLastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="MsgDataLastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgDataLastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgDataLastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgDataLastModifiedModified
        { 
            get
            {
                return _isMsgDataLastModifiedModified;
            }
            set
            {
                _isMsgDataLastModifiedModified = value;
            }
        }
        private bool _isMsgDataLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 150 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(150)]
        [DataMember(IsRequired = false)]
        public string MsgDataLink
        { 
            get
            {
                return _MsgDataLink;
            }
            set
            {
                if (_MsgDataLink != value)
                {
                    _MsgDataLink = value;
                    if (StartAutoUpdating)
                        IsMsgDataLinkModified = true;
                }
            }
        }
        private string _MsgDataLink = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="MsgDataLink" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgDataLink" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgDataLink" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgDataLinkModified
        { 
            get
            {
                return _isMsgDataLinkModified;
            }
            set
            {
                _isMsgDataLinkModified = value;
            }
        }
        private bool _isMsgDataLinkModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string MsgDataMime
        { 
            get
            {
                return _MsgDataMime;
            }
            set
            {
                if (_MsgDataMime != value)
                {
                    _MsgDataMime = value;
                    if (StartAutoUpdating)
                        IsMsgDataMimeModified = true;
                }
            }
        }
        private string _MsgDataMime = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="MsgDataMime" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgDataMime" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgDataMime" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgDataMimeModified
        { 
            get
            {
                return _isMsgDataMimeModified;
            }
            set
            {
                _isMsgDataMimeModified = value;
            }
        }
        private bool _isMsgDataMimeModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 150 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(150)]
        [DataMember(IsRequired = false)]
        public string MsgTitle
        { 
            get
            {
                return _MsgTitle;
            }
            set
            {
                if (_MsgTitle != value)
                {
                    _MsgTitle = value;
                    if (StartAutoUpdating)
                        IsMsgTitleModified = true;
                }
            }
        }
        private string _MsgTitle = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="MsgTitle" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MsgTitle" /> only if this is set to true no matter what
        /// the actual value of <see cref="MsgTitle" /> is.
        /// </summary>
        [DataMember]
        public bool IsMsgTitleModified
        { 
            get
            {
                return _isMsgTitleModified;
            }
            set
            {
                _isMsgTitleModified = value;
            }
        }
        private bool _isMsgTitleModified = false;

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string FromID
        { 
            get
            {
                return _FromID;
            }
            set
            {
                if (_FromID != value)
                {
                    _FromID = value;
                }
            }
        }
        private string _FromID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int TypeID
        { 
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    _TypeID = value;
                }
            }
        }
        private int _TypeID = default(int);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string GroupID
        { 
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    _GroupID = value;
                }
            }
        }
        private string _GroupID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ReplyToID
        { 
            get
            {
                return _ReplyToID;
            }
            set
            {
                if (_ReplyToID != value)
                {
                    _ReplyToID = value;
                }
            }
        }
        private string _ReplyToID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ToID
        { 
            get
            {
                return _ToID;
            }
            set
            {
                if (_ToID != value)
                {
                    _ToID = value;
                }
            }
        }
        private string _ToID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="ShortMessage.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (_Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "ShortMessages" for <see cref="ShortMessage" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.ReplyToID" /> }.
        /// This is the hierarchic parent entity of the current one for this self-referencing data set.
        /// </summary>
        [DataMember]
        public ShortMessage UpperRef
        {
            get 
            {
                if (ReplyToID == null)
                    return null;
                else if (_UpperRef == null && AutoLoadUpperRef != null)
                    _UpperRef = AutoLoadUpperRef();
                return _UpperRef; 
            }
            set 
            { 
                _UpperRef = value; 
            }
        }
        private ShortMessage _UpperRef = null;

        /// <summary>
        /// <see cref="ShortMessage.UpperRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadUpperRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUpperRef()
        {
            if (ReplyToID == null || _UpperRef != null)
                return;
            if (DelLoadUpperRef != null)
                _UpperRef = DelLoadUpperRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.UpperRef" />.
        /// </summary>
        public Func<ShortMessage> DelLoadUpperRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.UpperRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<ShortMessage> AutoLoadUpperRef = null;

        /// <summary>
        /// Entity in data set "ShortMessageTypes" for <see cref="ShortMessageType" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.TypeID" /> }.
        /// </summary>
        [DataMember]
        public ShortMessageType ShortMessageTypeRef
        {
            get 
            {
                if (_ShortMessageTypeRef == null && AutoLoadShortMessageTypeRef != null)
                    _ShortMessageTypeRef = AutoLoadShortMessageTypeRef();
                return _ShortMessageTypeRef; 
            }
            set 
            { 
                _ShortMessageTypeRef = value; 
            }
        }
        private ShortMessageType _ShortMessageTypeRef = null;

        /// <summary>
        /// <see cref="ShortMessage.ShortMessageTypeRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadShortMessageTypeRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadShortMessageTypeRef()
        {
            if (_ShortMessageTypeRef != null)
                return;
            if (DelLoadShortMessageTypeRef != null)
                _ShortMessageTypeRef = DelLoadShortMessageTypeRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.ShortMessageTypeRef" />.
        /// </summary>
        public Func<ShortMessageType> DelLoadShortMessageTypeRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.ShortMessageTypeRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<ShortMessageType> AutoLoadShortMessageTypeRef = null;

        /// <summary>
        /// Entity in data set "UserGroups" for <see cref="UserGroup" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.GroupID" /> }.
        /// </summary>
        [DataMember]
        public UserGroup UserGroupRef
        {
            get 
            {
                if (GroupID == null)
                    return null;
                else if (_UserGroupRef == null && AutoLoadUserGroupRef != null)
                    _UserGroupRef = AutoLoadUserGroupRef();
                return _UserGroupRef; 
            }
            set 
            { 
                _UserGroupRef = value; 
            }
        }
        private UserGroup _UserGroupRef = null;

        /// <summary>
        /// <see cref="ShortMessage.UserGroupRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadUserGroupRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserGroupRef()
        {
            if (GroupID == null || _UserGroupRef != null)
                return;
            if (DelLoadUserGroupRef != null)
                _UserGroupRef = DelLoadUserGroupRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.UserGroupRef" />.
        /// </summary>
        public Func<UserGroup> DelLoadUserGroupRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.UserGroupRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroup> AutoLoadUserGroupRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.FromID" /> }.
        /// </summary>
        [DataMember]
        public User User_FromID
        {
            get 
            {
                if (_User_FromID == null && AutoLoadUser_FromID != null)
                    _User_FromID = AutoLoadUser_FromID();
                return _User_FromID; 
            }
            set 
            { 
                _User_FromID = value; 
            }
        }
        private User _User_FromID = null;

        /// <summary>
        /// <see cref="ShortMessage.User_FromID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadUser_FromID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_FromID()
        {
            if (_User_FromID != null)
                return;
            if (DelLoadUser_FromID != null)
                _User_FromID = DelLoadUser_FromID();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.User_FromID" />.
        /// </summary>
        public Func<User> DelLoadUser_FromID = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.User_FromID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_FromID = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessage.ToID" /> }.
        /// </summary>
        [DataMember]
        public User User_ToID
        {
            get 
            {
                if (ToID == null)
                    return null;
                else if (_User_ToID == null && AutoLoadUser_ToID != null)
                    _User_ToID = AutoLoadUser_ToID();
                return _User_ToID; 
            }
            set 
            { 
                _User_ToID = value; 
            }
        }
        private User _User_ToID = null;

        /// <summary>
        /// <see cref="ShortMessage.User_ToID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessage.DelLoadUser_ToID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_ToID()
        {
            if (ToID == null || _User_ToID != null)
                return;
            if (DelLoadUser_ToID != null)
                _User_ToID = DelLoadUser_ToID();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.User_ToID" />.
        /// </summary>
        public Func<User> DelLoadUser_ToID = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessage.User_ToID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_ToID = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="ShortMessageAttachmentSet" /> for data set "ShortMessageAttachments" of <see cref="ShortMessageAttachment" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAttachmentSet" /> set is { <see cref="ShortMessageAttachment.MessageID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageAttachmentSet ShortMessageAttachments
		{
			get
			{
                if (_ShortMessageAttachments == null)
                    _ShortMessageAttachments = new ShortMessageAttachmentSet();
				return _ShortMessageAttachments;
			}
            set
            {
                _ShortMessageAttachments = value;
            }
		}
		private ShortMessageAttachmentSet _ShortMessageAttachments = null;

        /// <summary>
        /// Entitites enumeration expression for data set "ShortMessageAttachments" of <see cref="ShortMessageAttachment" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAttachmentSet" /> set is { <see cref="ShortMessageAttachment.MessageID" /> }.
        /// </summary>
		public IEnumerable<ShortMessageAttachment> ShortMessageAttachmentEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="ShortMessageAttachment" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAttachmentSet" /> set is { <see cref="ShortMessageAttachment.MessageID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageAttachment[] ChangedShortMessageAttachments
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="ShortMessageAudienceSet" /> for data set "ShortMessageAudiences" of <see cref="ShortMessageAudience" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAudienceSet" /> set is { <see cref="ShortMessageAudience.MsgID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageAudienceSet ShortMessageAudiences
		{
			get
			{
                if (_ShortMessageAudiences == null)
                    _ShortMessageAudiences = new ShortMessageAudienceSet();
				return _ShortMessageAudiences;
			}
            set
            {
                _ShortMessageAudiences = value;
            }
		}
		private ShortMessageAudienceSet _ShortMessageAudiences = null;

        /// <summary>
        /// Entitites enumeration expression for data set "ShortMessageAudiences" of <see cref="ShortMessageAudience" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAudienceSet" /> set is { <see cref="ShortMessageAudience.MsgID" /> }.
        /// </summary>
		public IEnumerable<ShortMessageAudience> ShortMessageAudienceEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="ShortMessageAudience" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageAudienceSet" /> set is { <see cref="ShortMessageAudience.MsgID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageAudience[] ChangedShortMessageAudiences
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="ShortMessageSet" /> for data set "ShortMessages" of <see cref="ShortMessage" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.ReplyToID" /> }.
        /// This is the hierarchic child entity set for this self-referencing data set.
        /// </summary>
        [DataMember]
		public ShortMessageSet ShortMessages
		{
			get
			{
                if (_ShortMessages == null)
                    _ShortMessages = new ShortMessageSet();
				return _ShortMessages;
			}
            set
            {
                _ShortMessages = value;
            }
		}
		private ShortMessageSet _ShortMessages = null;

        /// <summary>
        /// Entitites enumeration expression for data set "ShortMessages" of <see cref="ShortMessage" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.ReplyToID" /> }.
        /// This is the hierarchic child enumeration for this self-referencing data set.
        /// </summary>
		public IEnumerable<ShortMessage> ShortMessageEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="ShortMessage" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.ReplyToID" /> }.
        /// This is the hierarchic child changed set for this self-referencing data one.
        /// </summary>
        [DataMember]
		public ShortMessage[] ChangedShortMessages
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(ShortMessage other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(ShortMessage other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(ShortMessage from, ShortMessage to)
        {
            if (to.IsPersisted)
            {
                if (from.IsMsgTextModified && !to.IsMsgTextModified)
                {
                    to.MsgText = from.MsgText;
                    to.IsMsgTextModified = true;
                }
                if (from.IsIsNotReceivedModified && !to.IsIsNotReceivedModified)
                {
                    to.IsNotReceived = from.IsNotReceived;
                    to.IsIsNotReceivedModified = true;
                }
                if (from.IsLastModifiedModified && !to.IsLastModifiedModified)
                {
                    to.LastModified = from.LastModified;
                    to.IsLastModifiedModified = true;
                }
                if (from.IsMsgDataModified && !to.IsMsgDataModified)
                {
                    to.MsgData = from.MsgData;
                    to.IsMsgDataModified = true;
                }
                if (from.IsMsgDataLastModifiedModified && !to.IsMsgDataLastModifiedModified)
                {
                    to.MsgDataLastModified = from.MsgDataLastModified;
                    to.IsMsgDataLastModifiedModified = true;
                }
                if (from.IsMsgDataLinkModified && !to.IsMsgDataLinkModified)
                {
                    to.MsgDataLink = from.MsgDataLink;
                    to.IsMsgDataLinkModified = true;
                }
                if (from.IsMsgDataMimeModified && !to.IsMsgDataMimeModified)
                {
                    to.MsgDataMime = from.MsgDataMime;
                    to.IsMsgDataMimeModified = true;
                }
                if (from.IsMsgTitleModified && !to.IsMsgTitleModified)
                {
                    to.MsgTitle = from.MsgTitle;
                    to.IsMsgTitleModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.CreatedDate = from.CreatedDate;
                to.MsgText = from.MsgText;
                to.IsMsgTextModified = from.IsMsgTextModified;
                to.IsNotReceived = from.IsNotReceived;
                to.IsIsNotReceivedModified = from.IsIsNotReceivedModified;
                to.LastModified = from.LastModified;
                to.IsLastModifiedModified = from.IsLastModifiedModified;
                to.MsgData = from.MsgData;
                to.IsMsgDataModified = from.IsMsgDataModified;
                to.MsgDataLastModified = from.MsgDataLastModified;
                to.IsMsgDataLastModifiedModified = from.IsMsgDataLastModifiedModified;
                to.MsgDataLink = from.MsgDataLink;
                to.IsMsgDataLinkModified = from.IsMsgDataLinkModified;
                to.MsgDataMime = from.MsgDataMime;
                to.IsMsgDataMimeModified = from.IsMsgDataMimeModified;
                to.MsgTitle = from.MsgTitle;
                to.IsMsgTitleModified = from.IsMsgTitleModified;
                to.ApplicationID = from.ApplicationID;
                to.FromID = from.FromID;
                to.TypeID = from.TypeID;
                to.GroupID = from.GroupID;
                to.ReplyToID = from.ReplyToID;
                to.ToID = from.ToID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(ShortMessage newdata)
        {
            int cnt = 0;
            if (MsgText != newdata.MsgText)
            {
                MsgText = newdata.MsgText;
                IsMsgTextModified = true;
                cnt++;
            }
            if (IsNotReceived != newdata.IsNotReceived)
            {
                IsNotReceived = newdata.IsNotReceived;
                IsIsNotReceivedModified = true;
                cnt++;
            }
            if (LastModified != newdata.LastModified)
            {
                LastModified = newdata.LastModified;
                IsLastModifiedModified = true;
                cnt++;
            }
            bool bMsgData = MsgData == null && newdata.MsgData != null ||
                                                         MsgData != null && newdata.MsgData == null ||
                                                         MsgData != null && newdata.MsgData != null && MsgData.Length != newdata.MsgData.Length;
            if (!bMsgData && MsgData != null)
            {
                for (int i = 0; i < MsgData.Length; i++)
                {
                    bMsgData = MsgData[i] != newdata.MsgData[i];
                    if (bMsgData)
                        break;
                }
            }
            if (bMsgData)
            {
                MsgData = newdata.MsgData;
                IsMsgDataModified = true;
                cnt++;
            }
            if (MsgDataLastModified != newdata.MsgDataLastModified)
            {
                MsgDataLastModified = newdata.MsgDataLastModified;
                IsMsgDataLastModifiedModified = true;
                cnt++;
            }
            if (MsgDataLink != newdata.MsgDataLink)
            {
                MsgDataLink = newdata.MsgDataLink;
                IsMsgDataLinkModified = true;
                cnt++;
            }
            if (MsgDataMime != newdata.MsgDataMime)
            {
                MsgDataMime = newdata.MsgDataMime;
                IsMsgDataMimeModified = true;
                cnt++;
            }
            if (MsgTitle != newdata.MsgTitle)
            {
                MsgTitle = newdata.MsgTitle;
                IsMsgTitleModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (MsgText == null)
                MsgText = "";
            if (ApplicationID == null)
                ApplicationID = "";
            if (FromID == null)
                FromID = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsMsgTextModified || IsIsNotReceivedModified || IsLastModifiedModified || IsMsgDataModified || IsMsgDataLastModifiedModified || IsMsgDataLinkModified || IsMsgDataMimeModified || IsMsgTitleModified;
            if (IsMsgDataModified && !IsMsgDataLoaded)
                IsMsgDataLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public ShortMessage ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            ShortMessage e = new ShortMessage();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.CreatedDate = CreatedDate;
            e.MsgText = MsgText;
            if (preserveState)
                e.IsMsgTextModified = IsMsgTextModified;
            else
                e.IsMsgTextModified = false;
            e.IsNotReceived = IsNotReceived;
            if (preserveState)
                e.IsIsNotReceivedModified = IsIsNotReceivedModified;
            else
                e.IsIsNotReceivedModified = false;
            e.LastModified = LastModified;
            if (preserveState)
                e.IsLastModifiedModified = IsLastModifiedModified;
            else
                e.IsLastModifiedModified = false;
            e.MsgDataLastModified = MsgDataLastModified;
            if (preserveState)
                e.IsMsgDataLastModifiedModified = IsMsgDataLastModifiedModified;
            else
                e.IsMsgDataLastModifiedModified = false;
            e.MsgDataLink = MsgDataLink;
            if (preserveState)
                e.IsMsgDataLinkModified = IsMsgDataLinkModified;
            else
                e.IsMsgDataLinkModified = false;
            e.MsgDataMime = MsgDataMime;
            if (preserveState)
                e.IsMsgDataMimeModified = IsMsgDataMimeModified;
            else
                e.IsMsgDataMimeModified = false;
            e.MsgTitle = MsgTitle;
            if (preserveState)
                e.IsMsgTitleModified = IsMsgTitleModified;
            else
                e.IsMsgTitleModified = false;
            e.ApplicationID = ApplicationID;
            e.FromID = FromID;
            e.TypeID = TypeID;
            e.GroupID = GroupID;
            e.ReplyToID = ReplyToID;
            e.ToID = ToID;
            if (allData)
            {
                if (!checkLoadState || IsMsgDataLoaded)
                    e.MsgData = MsgData;
                if (preserveState)
                    e.IsMsgDataModified = IsMsgDataModified;
                else
                    e.IsMsgDataModified = false;
                e.IsMsgDataLoaded = IsMsgDataLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[ShortMessage]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreatedDate = " + CreatedDate + @"
  MsgText = '" + MsgText + @"'");
            if (IsMsgTextModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  IsNotReceived = " + (IsNotReceived.HasValue ? IsNotReceived.Value.ToString() : "null") + @"");
            if (IsIsNotReceivedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastModified = " + (LastModified.HasValue ? LastModified.Value.ToString() : "null") + @"");
            if (IsLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MsgDataLastModified = " + (MsgDataLastModified.HasValue ? MsgDataLastModified.Value.ToString() : "null") + @"");
            if (IsMsgDataLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MsgDataLink = '" + (MsgDataLink != null ? MsgDataLink : "null") + @"'");
            if (IsMsgDataLinkModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MsgDataMime = '" + (MsgDataMime != null ? MsgDataMime : "null") + @"'");
            if (IsMsgDataMimeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MsgTitle = '" + (MsgTitle != null ? MsgTitle : "null") + @"'");
            if (IsMsgTitleModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ApplicationID = '" + ApplicationID + @"'
  FromID = '" + FromID + @"'
  TypeID = " + TypeID + @"
  GroupID = '" + (GroupID != null ? GroupID : "null") + @"'
  ReplyToID = '" + (ReplyToID != null ? ReplyToID : "null") + @"'
  ToID = '" + (ToID != null ? ToID : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="ShortMessage" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class ShortMessageUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public ShortMessage UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public ShortMessage ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
