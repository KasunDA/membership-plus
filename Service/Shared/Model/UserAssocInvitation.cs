//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserAssocInvitations" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateDate</term>
    ///      <description>See <see cref="UserAssocInvitation.CreateDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CurrentStatus</term>
    ///      <description>See <see cref="UserAssocInvitation.CurrentStatus" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>InvitationMessage</term>
    ///      <description>See <see cref="UserAssocInvitation.InvitationMessage" />. Editable; nullable; load delayed; max-length = 1500 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastStatusChange</term>
    ///      <description>See <see cref="UserAssocInvitation.LastStatusChange" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>FromUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.FromUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ToUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.ToUserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>User_FromUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.User_FromUserID" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>User_ToUserID</term>
    ///      <description>See <see cref="UserAssocInvitation.User_ToUserID" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class UserAssocInvitation : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.FromUserID + ":" + this.ToUserID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserAssocInvitationService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "FromUserID = " + FromUserID + "\r\n";
                str += "ToUserID = " + ToUserID + "\r\n";
                if (IsCurrentStatusModified)
                    str += "Modified [CurrentStatus] = " + CurrentStatus + "\r\n";
                if (IsInvitationMessageModified)
                    str += "Modified [InvitationMessage] = " + InvitationMessage + "\r\n";
                if (IsLastStatusChangeModified)
                    str += "Modified [LastStatusChange] = " + LastStatusChange + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUser_FromUserID();
            LoadUser_ToUserID();
            return String.Format(@"From {0} to {1}", (User_FromUserID != null ? User_FromUserID.DistinctString : ""), (User_ToUserID != null ? User_ToUserID.DistinctString : ""));
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserAssocInvitation()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public UserAssocInvitation(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserAssocInvitation));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as UserAssocInvitation;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserAssocInvitation));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string FromUserID
        { 
            get
            {
                return _FromUserID;
            }
            set
            {
                if (_FromUserID != value)
                {
                    _FromUserID = value;
                }
            }
        }
        private string _FromUserID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ToUserID
        { 
            get
            {
                return _ToUserID;
            }
            set
            {
                if (_ToUserID != value)
                {
                    _ToUserID = value;
                }
            }
        }
        private string _ToUserID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateDate
        { 
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    _CreateDate = value;
                }
            }
        }
        private DateTime _CreateDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string CurrentStatus
        { 
            get
            {
                return _CurrentStatus;
            }
            set
            {
                if (_CurrentStatus != value)
                {
                    _CurrentStatus = value;
                    if (StartAutoUpdating)
                        IsCurrentStatusModified = true;
                }
            }
        }
        private string _CurrentStatus = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="CurrentStatus" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="CurrentStatus" /> only if this is set to true no matter what
        /// the actual value of <see cref="CurrentStatus" /> is.
        /// </summary>
        [DataMember]
        public bool IsCurrentStatusModified
        { 
            get
            {
                return _isCurrentStatusModified;
            }
            set
            {
                _isCurrentStatusModified = value;
            }
        }
        private bool _isCurrentStatusModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed; max-length = 1500 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(1500)]
        [DataMember(IsRequired = false)]
        public string InvitationMessage
        { 
            get
            {
                return _InvitationMessage;
            }
            set
            {
                if (_InvitationMessage != value)
                {
                    _InvitationMessage = value;
                    if (StartAutoUpdating)
                        IsInvitationMessageModified = true;
                    if (StartAutoUpdating)
                        IsInvitationMessageLoaded = value != null;
                }
            }
        }
        private string _InvitationMessage = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="InvitationMessage" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="InvitationMessage" /> only if this is set to true no matter what
        /// the actual value of <see cref="InvitationMessage" /> is.
        /// </summary>
        [DataMember]
        public bool IsInvitationMessageModified
        { 
            get
            {
                return _isInvitationMessageModified;
            }
            set
            {
                _isInvitationMessageModified = value;
            }
        }
        private bool _isInvitationMessageModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "InvitationMessage" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsInvitationMessageLoaded
        { 
            get
            {
                return _isInvitationMessageLoaded;
            }
            set
            {
                _isInvitationMessageLoaded = value;
            }
        }
        private bool _isInvitationMessageLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastStatusChange
        { 
            get
            {
                return _LastStatusChange;
            }
            set
            {
                if (_LastStatusChange != value)
                {
                    _LastStatusChange = value;
                    if (StartAutoUpdating)
                        IsLastStatusChangeModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastStatusChange = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastStatusChange" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastStatusChange" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastStatusChange" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastStatusChangeModified
        { 
            get
            {
                return _isLastStatusChangeModified;
            }
            set
            {
                _isLastStatusChangeModified = value;
            }
        }
        private bool _isLastStatusChangeModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAssocInvitation.FromUserID" /> }.
        /// </summary>
        [DataMember]
        public User User_FromUserID
        {
            get 
            {
                if (_User_FromUserID == null && AutoLoadUser_FromUserID != null)
                    _User_FromUserID = AutoLoadUser_FromUserID();
                return _User_FromUserID; 
            }
            set 
            { 
                _User_FromUserID = value; 
            }
        }
        private User _User_FromUserID = null;

        /// <summary>
        /// <see cref="UserAssocInvitation.User_FromUserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAssocInvitation.DelLoadUser_FromUserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_FromUserID()
        {
            if (_User_FromUserID != null)
                return;
            if (DelLoadUser_FromUserID != null)
                _User_FromUserID = DelLoadUser_FromUserID();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAssocInvitation.User_FromUserID" />.
        /// </summary>
        public Func<User> DelLoadUser_FromUserID = null;

        /// <summary>
        /// A delegate to load <see cref="UserAssocInvitation.User_FromUserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_FromUserID = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAssocInvitation.ToUserID" /> }.
        /// </summary>
        [DataMember]
        public User User_ToUserID
        {
            get 
            {
                if (_User_ToUserID == null && AutoLoadUser_ToUserID != null)
                    _User_ToUserID = AutoLoadUser_ToUserID();
                return _User_ToUserID; 
            }
            set 
            { 
                _User_ToUserID = value; 
            }
        }
        private User _User_ToUserID = null;

        /// <summary>
        /// <see cref="UserAssocInvitation.User_ToUserID" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAssocInvitation.DelLoadUser_ToUserID" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUser_ToUserID()
        {
            if (_User_ToUserID != null)
                return;
            if (DelLoadUser_ToUserID != null)
                _User_ToUserID = DelLoadUser_ToUserID();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAssocInvitation.User_ToUserID" />.
        /// </summary>
        public Func<User> DelLoadUser_ToUserID = null;

        /// <summary>
        /// A delegate to load <see cref="UserAssocInvitation.User_ToUserID" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUser_ToUserID = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserAssocInvitation other)
        {
            if (other == null)
                return false;
            if (FromUserID != other.FromUserID)
                return false;
            if (ToUserID != other.ToUserID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserAssocInvitation other)
        {
            if (other == null)
                return false;
            else
                return FromUserID == other.FromUserID &&  ToUserID == other.ToUserID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserAssocInvitation from, UserAssocInvitation to)
        {
            if (to.IsPersisted)
            {
                if (from.IsCurrentStatusModified && !to.IsCurrentStatusModified)
                {
                    to.CurrentStatus = from.CurrentStatus;
                    to.IsCurrentStatusModified = true;
                }
                if (from.IsInvitationMessageModified && !to.IsInvitationMessageModified)
                {
                    to.InvitationMessage = from.InvitationMessage;
                    to.IsInvitationMessageModified = true;
                }
                if (from.IsLastStatusChangeModified && !to.IsLastStatusChangeModified)
                {
                    to.LastStatusChange = from.LastStatusChange;
                    to.IsLastStatusChangeModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.FromUserID = from.FromUserID;
                to.ToUserID = from.ToUserID;
                to.CreateDate = from.CreateDate;
                to.CurrentStatus = from.CurrentStatus;
                to.IsCurrentStatusModified = from.IsCurrentStatusModified;
                to.InvitationMessage = from.InvitationMessage;
                to.IsInvitationMessageModified = from.IsInvitationMessageModified;
                to.LastStatusChange = from.LastStatusChange;
                to.IsLastStatusChangeModified = from.IsLastStatusChangeModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserAssocInvitation newdata)
        {
            int cnt = 0;
            if (CurrentStatus != newdata.CurrentStatus)
            {
                CurrentStatus = newdata.CurrentStatus;
                IsCurrentStatusModified = true;
                cnt++;
            }
            if (InvitationMessage != newdata.InvitationMessage)
            {
                InvitationMessage = newdata.InvitationMessage;
                IsInvitationMessageModified = true;
                cnt++;
            }
            if (LastStatusChange != newdata.LastStatusChange)
            {
                LastStatusChange = newdata.LastStatusChange;
                IsLastStatusChangeModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (!IsEntityChanged)
                IsEntityChanged = IsCurrentStatusModified || IsInvitationMessageModified || IsLastStatusChangeModified;
            if (IsInvitationMessageModified && !IsInvitationMessageLoaded)
                IsInvitationMessageLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserAssocInvitation ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            UserAssocInvitation e = new UserAssocInvitation();
            e.StartAutoUpdating = false;
            e.FromUserID = FromUserID;
            e.ToUserID = ToUserID;
            e.CreateDate = CreateDate;
            e.CurrentStatus = CurrentStatus;
            if (preserveState)
                e.IsCurrentStatusModified = IsCurrentStatusModified;
            else
                e.IsCurrentStatusModified = false;
            e.LastStatusChange = LastStatusChange;
            if (preserveState)
                e.IsLastStatusChangeModified = IsLastStatusChangeModified;
            else
                e.IsLastStatusChangeModified = false;
            if (allData)
            {
                if (!checkLoadState || IsInvitationMessageLoaded)
                    e.InvitationMessage = InvitationMessage;
                if (preserveState)
                    e.IsInvitationMessageModified = IsInvitationMessageModified;
                else
                    e.IsInvitationMessageModified = false;
                e.IsInvitationMessageLoaded = IsInvitationMessageLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserAssocInvitation]] =====----
  FromUserID = '" + FromUserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  ToUserID = '" + ToUserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreateDate = " + CreateDate + @"
  CurrentStatus = '" + (CurrentStatus != null ? CurrentStatus : "null") + @"'");
            if (IsCurrentStatusModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastStatusChange = " + (LastStatusChange.HasValue ? LastStatusChange.Value.ToString() : "null") + @"");
            if (IsLastStatusChangeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserAssocInvitation" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class UserAssocInvitationUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserAssocInvitation UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserAssocInvitation ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
