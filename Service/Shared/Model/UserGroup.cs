//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserGroups" data set. The set is a self-referencing hierarchic one.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="UserGroup.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="UserGroup.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>GroupDescription</term>
    ///      <description>See <see cref="UserGroup.GroupDescription" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupName</term>
    ///      <description>See <see cref="UserGroup.GroupName" />. Editable; nullable; max-length = 80 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupPassphrase</term>
    ///      <description>See <see cref="UserGroup.GroupPassphrase" />. Editable; nullable; max-length = 120 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserGroup.ApplicationID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupTypeID</term>
    ///      <description>See <see cref="UserGroup.GroupTypeID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>ParentID</term>
    ///      <description>See <see cref="UserGroup.ParentID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="UserGroup.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UpperRef</term>
    ///      <description>See <see cref="UserGroup.UpperRef" />, which is a member of the data set "UserGroups" for <see cref="UserGroup" />. Self-referencing. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupTypeRef</term>
    ///      <description>See <see cref="UserGroup.UserGroupTypeRef" />, which is a member of the data set "UserGroupTypes" for <see cref="UserGroupType" />.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Announcements</term>
    ///      <description>See <see cref="UserGroup.Announcements" />, which is a sub-set of the data set "Announcements" for <see cref="Announcement" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventCalendars</term>
    ///      <description>See <see cref="UserGroup.EventCalendars" />, which is a sub-set of the data set "EventCalendar" for <see cref="EventCalendar" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>ShortMessages</term>
    ///      <description>See <see cref="UserGroup.ShortMessages" />, which is a sub-set of the data set "ShortMessages" for <see cref="ShortMessage" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupAdminRoles</term>
    ///      <description>See <see cref="UserGroup.UserGroupAdminRoles" />, which is a sub-set of the data set "UserGroupAdminRoles" for <see cref="UserGroupAdminRole" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupMembers</term>
    ///      <description>See <see cref="UserGroup.UserGroupMembers" />, which is a sub-set of the data set "UserGroupMembers" for <see cref="UserGroupMember" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroups</term>
    ///      <description>See <see cref="UserGroup.UserGroups" />, which is a sub-set of the data set "UserGroups" for <see cref="UserGroup" />. Self-referencing.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class UserGroup : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserGroupService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsGroupDescriptionModified)
                    str += "Modified [GroupDescription] = " + GroupDescription + "\r\n";
                if (IsGroupNameModified)
                    str += "Modified [GroupName] = " + GroupName + "\r\n";
                if (IsGroupPassphraseModified)
                    str += "Modified [GroupPassphrase] = " + GroupPassphrase + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUpperRef();
            string str = String.Format(@"{0}/{1}", (UpperRef != null && ShowPathInfo ? UpperRef.GetFullEntityPath("/") : ""), (GroupName != null ? GroupName.Trim() : ""));
            str = str.Trim(" /".ToCharArray());
            return str;
        }

        /// <summary>
        /// Get the full path of an entity in a self-referencing set.
        /// </summary>
        /// <param name="sep">The node separator to be used.</param>
        /// <returns>
        ///   The full path.
        /// </returns>
        public string GetFullEntityPath(string sep)
        {
            string pstr = GetDistinctString(false);
            LoadUpperRef();
            UserGroup e = UpperRef;
            while (e != null)
            {
                pstr = e.GetDistinctString(false) + sep + pstr.TrimStart(sep.ToCharArray());
                e = e.UpperRef;
            }
            return pstr;
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserGroup()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public UserGroup(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserGroup));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as UserGroup;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserGroup));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public string GroupDescription
        { 
            get
            {
                return _GroupDescription;
            }
            set
            {
                if (_GroupDescription != value)
                {
                    _GroupDescription = value;
                    if (StartAutoUpdating)
                        IsGroupDescriptionModified = true;
                    if (StartAutoUpdating)
                        IsGroupDescriptionLoaded = value != null;
                }
            }
        }
        private string _GroupDescription = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="GroupDescription" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="GroupDescription" /> only if this is set to true no matter what
        /// the actual value of <see cref="GroupDescription" /> is.
        /// </summary>
        [DataMember]
        public bool IsGroupDescriptionModified
        { 
            get
            {
                return _isGroupDescriptionModified;
            }
            set
            {
                _isGroupDescriptionModified = value;
            }
        }
        private bool _isGroupDescriptionModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "GroupDescription" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsGroupDescriptionLoaded
        { 
            get
            {
                return _isGroupDescriptionLoaded;
            }
            set
            {
                _isGroupDescriptionLoaded = value;
            }
        }
        private bool _isGroupDescriptionLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 80 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(80)]
        [DataMember(IsRequired = false)]
        public string GroupName
        { 
            get
            {
                return _GroupName;
            }
            set
            {
                if (_GroupName != value)
                {
                    _GroupName = value;
                    if (StartAutoUpdating)
                        IsGroupNameModified = true;
                }
            }
        }
        private string _GroupName = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="GroupName" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="GroupName" /> only if this is set to true no matter what
        /// the actual value of <see cref="GroupName" /> is.
        /// </summary>
        [DataMember]
        public bool IsGroupNameModified
        { 
            get
            {
                return _isGroupNameModified;
            }
            set
            {
                _isGroupNameModified = value;
            }
        }
        private bool _isGroupNameModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 120 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(120)]
        [DataMember(IsRequired = false)]
        public string GroupPassphrase
        { 
            get
            {
                return _GroupPassphrase;
            }
            set
            {
                if (_GroupPassphrase != value)
                {
                    _GroupPassphrase = value;
                    if (StartAutoUpdating)
                        IsGroupPassphraseModified = true;
                }
            }
        }
        private string _GroupPassphrase = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="GroupPassphrase" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="GroupPassphrase" /> only if this is set to true no matter what
        /// the actual value of <see cref="GroupPassphrase" /> is.
        /// </summary>
        [DataMember]
        public bool IsGroupPassphraseModified
        { 
            get
            {
                return _isGroupPassphraseModified;
            }
            set
            {
                _isGroupPassphraseModified = value;
            }
        }
        private bool _isGroupPassphraseModified = false;

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int GroupTypeID
        { 
            get
            {
                return _GroupTypeID;
            }
            set
            {
                if (_GroupTypeID != value)
                {
                    _GroupTypeID = value;
                }
            }
        }
        private int _GroupTypeID = default(int);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ParentID
        { 
            get
            {
                return _ParentID;
            }
            set
            {
                if (_ParentID != value)
                {
                    _ParentID = value;
                }
            }
        }
        private string _ParentID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserGroup.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="UserGroup.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserGroup.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (_Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="UserGroup.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="UserGroup.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "UserGroups" for <see cref="UserGroup" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserGroup.ParentID" /> }.
        /// This is the hierarchic parent entity of the current one for this self-referencing data set.
        /// </summary>
        [DataMember]
        public UserGroup UpperRef
        {
            get 
            {
                if (ParentID == null)
                    return null;
                else if (_UpperRef == null && AutoLoadUpperRef != null)
                    _UpperRef = AutoLoadUpperRef();
                return _UpperRef; 
            }
            set 
            { 
                _UpperRef = value; 
            }
        }
        private UserGroup _UpperRef = null;

        /// <summary>
        /// <see cref="UserGroup.UpperRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserGroup.DelLoadUpperRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUpperRef()
        {
            if (ParentID == null || _UpperRef != null)
                return;
            if (DelLoadUpperRef != null)
                _UpperRef = DelLoadUpperRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserGroup.UpperRef" />.
        /// </summary>
        public Func<UserGroup> DelLoadUpperRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserGroup.UpperRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroup> AutoLoadUpperRef = null;

        /// <summary>
        /// Entity in data set "UserGroupTypes" for <see cref="UserGroupType" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserGroup.GroupTypeID" /> }.
        /// </summary>
        [DataMember]
        public UserGroupType UserGroupTypeRef
        {
            get 
            {
                if (_UserGroupTypeRef == null && AutoLoadUserGroupTypeRef != null)
                    _UserGroupTypeRef = AutoLoadUserGroupTypeRef();
                return _UserGroupTypeRef; 
            }
            set 
            { 
                _UserGroupTypeRef = value; 
            }
        }
        private UserGroupType _UserGroupTypeRef = null;

        /// <summary>
        /// <see cref="UserGroup.UserGroupTypeRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserGroup.DelLoadUserGroupTypeRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserGroupTypeRef()
        {
            if (_UserGroupTypeRef != null)
                return;
            if (DelLoadUserGroupTypeRef != null)
                _UserGroupTypeRef = DelLoadUserGroupTypeRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserGroup.UserGroupTypeRef" />.
        /// </summary>
        public Func<UserGroupType> DelLoadUserGroupTypeRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserGroup.UserGroupTypeRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroupType> AutoLoadUserGroupTypeRef = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="AnnouncementSet" /> for data set "Announcements" of <see cref="Announcement" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.GroupID" /> }.
        /// </summary>
        [DataMember]
		public AnnouncementSet Announcements
		{
			get
			{
                if (_Announcements == null)
                    _Announcements = new AnnouncementSet();
				return _Announcements;
			}
            set
            {
                _Announcements = value;
            }
		}
		private AnnouncementSet _Announcements = null;

        /// <summary>
        /// Entitites enumeration expression for data set "Announcements" of <see cref="Announcement" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.GroupID" /> }.
        /// </summary>
		public IEnumerable<Announcement> AnnouncementEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="Announcement" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="AnnouncementSet" /> set is { <see cref="Announcement.GroupID" /> }.
        /// </summary>
        [DataMember]
		public Announcement[] ChangedAnnouncements
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="EventCalendarSet" /> for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.GroupID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendarSet EventCalendars
		{
			get
			{
                if (_EventCalendars == null)
                    _EventCalendars = new EventCalendarSet();
				return _EventCalendars;
			}
            set
            {
                _EventCalendars = value;
            }
		}
		private EventCalendarSet _EventCalendars = null;

        /// <summary>
        /// Entitites enumeration expression for data set "EventCalendar" of <see cref="EventCalendar" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.GroupID" /> }.
        /// </summary>
		public IEnumerable<EventCalendar> EventCalendarEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="EventCalendar" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="EventCalendarSet" /> set is { <see cref="EventCalendar.GroupID" /> }.
        /// </summary>
        [DataMember]
		public EventCalendar[] ChangedEventCalendars
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="ShortMessageSet" /> for data set "ShortMessages" of <see cref="ShortMessage" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.GroupID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageSet ShortMessages
		{
			get
			{
                if (_ShortMessages == null)
                    _ShortMessages = new ShortMessageSet();
				return _ShortMessages;
			}
            set
            {
                _ShortMessages = value;
            }
		}
		private ShortMessageSet _ShortMessages = null;

        /// <summary>
        /// Entitites enumeration expression for data set "ShortMessages" of <see cref="ShortMessage" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.GroupID" /> }.
        /// </summary>
		public IEnumerable<ShortMessage> ShortMessageEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="ShortMessage" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageSet" /> set is { <see cref="ShortMessage.GroupID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessage[] ChangedShortMessages
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserGroupAdminRoleSet" /> for data set "UserGroupAdminRoles" of <see cref="UserGroupAdminRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupAdminRoleSet" /> set is { <see cref="UserGroupAdminRole.GroupID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupAdminRoleSet UserGroupAdminRoles
		{
			get
			{
                if (_UserGroupAdminRoles == null)
                    _UserGroupAdminRoles = new UserGroupAdminRoleSet();
				return _UserGroupAdminRoles;
			}
            set
            {
                _UserGroupAdminRoles = value;
            }
		}
		private UserGroupAdminRoleSet _UserGroupAdminRoles = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserGroupAdminRoles" of <see cref="UserGroupAdminRole" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupAdminRoleSet" /> set is { <see cref="UserGroupAdminRole.GroupID" /> }.
        /// </summary>
		public IEnumerable<UserGroupAdminRole> UserGroupAdminRoleEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserGroupAdminRole" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserGroupAdminRoleSet" /> set is { <see cref="UserGroupAdminRole.GroupID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupAdminRole[] ChangedUserGroupAdminRoles
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserGroupMemberSet" /> for data set "UserGroupMembers" of <see cref="UserGroupMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserGroupID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupMemberSet UserGroupMembers
		{
			get
			{
                if (_UserGroupMembers == null)
                    _UserGroupMembers = new UserGroupMemberSet();
				return _UserGroupMembers;
			}
            set
            {
                _UserGroupMembers = value;
            }
		}
		private UserGroupMemberSet _UserGroupMembers = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserGroupMembers" of <see cref="UserGroupMember" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserGroupID" /> }.
        /// </summary>
		public IEnumerable<UserGroupMember> UserGroupMemberEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserGroupMember" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserGroupMemberSet" /> set is { <see cref="UserGroupMember.UserGroupID" /> }.
        /// </summary>
        [DataMember]
		public UserGroupMember[] ChangedUserGroupMembers
		{
			get;
            set;
		}

        /// <summary>
        /// Entitity set <see cref="UserGroupSet" /> for data set "UserGroups" of <see cref="UserGroup" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupSet" /> set is { <see cref="UserGroup.ParentID" /> }.
        /// This is the hierarchic child entity set for this self-referencing data set.
        /// </summary>
        [DataMember]
		public UserGroupSet UserGroups
		{
			get
			{
                if (_UserGroups == null)
                    _UserGroups = new UserGroupSet();
				return _UserGroups;
			}
            set
            {
                _UserGroups = value;
            }
		}
		private UserGroupSet _UserGroups = null;

        /// <summary>
        /// Entitites enumeration expression for data set "UserGroups" of <see cref="UserGroup" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="UserGroupSet" /> set is { <see cref="UserGroup.ParentID" /> }.
        /// This is the hierarchic child enumeration for this self-referencing data set.
        /// </summary>
		public IEnumerable<UserGroup> UserGroupEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="UserGroup" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="UserGroupSet" /> set is { <see cref="UserGroup.ParentID" /> }.
        /// This is the hierarchic child changed set for this self-referencing data one.
        /// </summary>
        [DataMember]
		public UserGroup[] ChangedUserGroups
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserGroup other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserGroup other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserGroup from, UserGroup to)
        {
            if (to.IsPersisted)
            {
                if (from.IsGroupDescriptionModified && !to.IsGroupDescriptionModified)
                {
                    to.GroupDescription = from.GroupDescription;
                    to.IsGroupDescriptionModified = true;
                }
                if (from.IsGroupNameModified && !to.IsGroupNameModified)
                {
                    to.GroupName = from.GroupName;
                    to.IsGroupNameModified = true;
                }
                if (from.IsGroupPassphraseModified && !to.IsGroupPassphraseModified)
                {
                    to.GroupPassphrase = from.GroupPassphrase;
                    to.IsGroupPassphraseModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.GroupDescription = from.GroupDescription;
                to.IsGroupDescriptionModified = from.IsGroupDescriptionModified;
                to.GroupName = from.GroupName;
                to.IsGroupNameModified = from.IsGroupNameModified;
                to.GroupPassphrase = from.GroupPassphrase;
                to.IsGroupPassphraseModified = from.IsGroupPassphraseModified;
                to.ApplicationID = from.ApplicationID;
                to.GroupTypeID = from.GroupTypeID;
                to.ParentID = from.ParentID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserGroup newdata)
        {
            int cnt = 0;
            if (GroupDescription != newdata.GroupDescription)
            {
                GroupDescription = newdata.GroupDescription;
                IsGroupDescriptionModified = true;
                cnt++;
            }
            if (GroupName != newdata.GroupName)
            {
                GroupName = newdata.GroupName;
                IsGroupNameModified = true;
                cnt++;
            }
            if (GroupPassphrase != newdata.GroupPassphrase)
            {
                GroupPassphrase = newdata.GroupPassphrase;
                IsGroupPassphraseModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (ApplicationID == null)
                ApplicationID = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsGroupDescriptionModified || IsGroupNameModified || IsGroupPassphraseModified;
            if (IsGroupDescriptionModified && !IsGroupDescriptionLoaded)
                IsGroupDescriptionLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserGroup ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            UserGroup e = new UserGroup();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.GroupName = GroupName;
            if (preserveState)
                e.IsGroupNameModified = IsGroupNameModified;
            else
                e.IsGroupNameModified = false;
            e.GroupPassphrase = GroupPassphrase;
            if (preserveState)
                e.IsGroupPassphraseModified = IsGroupPassphraseModified;
            else
                e.IsGroupPassphraseModified = false;
            e.ApplicationID = ApplicationID;
            e.GroupTypeID = GroupTypeID;
            e.ParentID = ParentID;
            if (allData)
            {
                if (!checkLoadState || IsGroupDescriptionLoaded)
                    e.GroupDescription = GroupDescription;
                if (preserveState)
                    e.IsGroupDescriptionModified = IsGroupDescriptionModified;
                else
                    e.IsGroupDescriptionModified = false;
                e.IsGroupDescriptionLoaded = IsGroupDescriptionLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserGroup]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  GroupName = '" + (GroupName != null ? GroupName : "null") + @"'");
            if (IsGroupNameModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  GroupPassphrase = '" + (GroupPassphrase != null ? GroupPassphrase : "null") + @"'");
            if (IsGroupPassphraseModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ApplicationID = '" + ApplicationID + @"'
  GroupTypeID = " + GroupTypeID + @"
  ParentID = '" + (ParentID != null ? ParentID : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserGroup" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class UserGroupUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserGroup UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserGroup ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
