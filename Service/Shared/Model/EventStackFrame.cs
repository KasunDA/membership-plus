//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "EventStackFrames" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventStackFrame.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventID</term>
    ///      <description>See <see cref="EventStackFrame.EventID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventStackFrame.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>EventID</term>
    ///      <description>See <see cref="EventStackFrame.EventID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ClassName_</term>
    ///      <description>See <see cref="EventStackFrame.ClassName_" />. Fixed; not null; max-length = 150 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>MethodInfo</term>
    ///      <description>See <see cref="EventStackFrame.MethodInfo" />. Fixed; not null; max-length = 220 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>FileName_</term>
    ///      <description>See <see cref="EventStackFrame.FileName_" />. Fixed; nullable; max-length = 220 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>FullInfo</term>
    ///      <description>See <see cref="EventStackFrame.FullInfo" />. Fixed; nullable; load delayed; max-length = 1500 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LineNumber</term>
    ///      <description>See <see cref="EventStackFrame.LineNumber" />. Fixed; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventID</term>
    ///      <description>See <see cref="EventStackFrame.EventID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventLocationRef</term>
    ///      <description>See <see cref="EventStackFrame.EventLocationRef" />, which is a member of the data set "EventLocations" for <see cref="EventLocation" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class EventStackFrame : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.EventID + ":" + this.ID.ToString();
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IEventStackFrameService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                str += "EventID = " + EventID + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"ID = {0}, EventID = {1}", ID, EventID.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventStackFrame()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public EventStackFrame(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventStackFrame));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as EventStackFrame;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventStackFrame));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private int _ID = default(int);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string EventID
        { 
            get
            {
                return _EventID;
            }
            set
            {
                if (_EventID != value)
                {
                    _EventID = value;
                }
            }
        }
        private string _EventID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 150 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(150)]
        [DataMember(IsRequired = true)]
        public string ClassName_
        { 
            get
            {
                return _ClassName_;
            }
            set
            {
                if (_ClassName_ != value)
                {
                    _ClassName_ = value;
                }
            }
        }
        private string _ClassName_ = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 220 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(220)]
        [DataMember(IsRequired = true)]
        public string MethodInfo
        { 
            get
            {
                return _MethodInfo;
            }
            set
            {
                if (_MethodInfo != value)
                {
                    _MethodInfo = value;
                }
            }
        }
        private string _MethodInfo = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 220 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(220)]
        [DataMember(IsRequired = false)]
        public string FileName_
        { 
            get
            {
                return _FileName_;
            }
            set
            {
                if (_FileName_ != value)
                {
                    _FileName_ = value;
                }
            }
        }
        private string _FileName_ = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; load delayed; max-length = 1500 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(1500)]
        [DataMember(IsRequired = false)]
        public string FullInfo
        { 
            get
            {
                return _FullInfo;
            }
            set
            {
                if (_FullInfo != value)
                {
                    _FullInfo = value;
                    if (StartAutoUpdating)
                        IsFullInfoLoaded = value != null;
                }
            }
        }
        private string _FullInfo = default(string);

        /// <summary>
        /// Wether or not the value of the delay loaded "FullInfo" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsFullInfoLoaded
        { 
            get
            {
                return _isFullInfoLoaded;
            }
            set
            {
                _isFullInfoLoaded = value;
            }
        }
        private bool _isFullInfoLoaded = false;

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string LineNumber
        { 
            get
            {
                return _LineNumber;
            }
            set
            {
                if (_LineNumber != value)
                {
                    _LineNumber = value;
                }
            }
        }
        private string _LineNumber = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "EventLocations" for <see cref="EventLocation" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventStackFrame.EventID" /> }.
        /// </summary>
        [DataMember]
        public EventLocation EventLocationRef
        {
            get 
            {
                if (_EventLocationRef == null && AutoLoadEventLocationRef != null)
                    _EventLocationRef = AutoLoadEventLocationRef();
                return _EventLocationRef; 
            }
            set 
            { 
                _EventLocationRef = value; 
            }
        }
        private EventLocation _EventLocationRef = null;

        /// <summary>
        /// <see cref="EventStackFrame.EventLocationRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventStackFrame.DelLoadEventLocationRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadEventLocationRef()
        {
            if (_EventLocationRef != null)
                return;
            if (DelLoadEventLocationRef != null)
                _EventLocationRef = DelLoadEventLocationRef();
        }

        /// <summary>
        /// A delegate to load <see cref="EventStackFrame.EventLocationRef" />.
        /// </summary>
        public Func<EventLocation> DelLoadEventLocationRef = null;

        /// <summary>
        /// A delegate to load <see cref="EventStackFrame.EventLocationRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<EventLocation> AutoLoadEventLocationRef = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(EventStackFrame other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            if (EventID != other.EventID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(EventStackFrame other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID &&  EventID == other.EventID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(EventStackFrame from, EventStackFrame to)
        {
            if (to.IsPersisted)
            {
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.EventID = from.EventID;
                to.ClassName_ = from.ClassName_;
                to.MethodInfo = from.MethodInfo;
                to.FileName_ = from.FileName_;
                to.FullInfo = from.FullInfo;
                to.LineNumber = from.LineNumber;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(EventStackFrame newdata)
        {
            int cnt = 0;
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (ClassName_ == null)
                ClassName_ = "";
            if (MethodInfo == null)
                MethodInfo = "";
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public EventStackFrame ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            EventStackFrame e = new EventStackFrame();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.EventID = EventID;
            e.ClassName_ = ClassName_;
            e.MethodInfo = MethodInfo;
            e.FileName_ = FileName_;
            e.LineNumber = LineNumber;
            if (allData)
            {
                if (!checkLoadState || IsFullInfoLoaded)
                    e.FullInfo = FullInfo;
                e.IsFullInfoLoaded = IsFullInfoLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[EventStackFrame]] =====----
  ID = " + ID + @"");
            sb.Append(@" (natural id)");
            sb.Append(@"
  EventID = '" + EventID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  ClassName_ = '" + ClassName_ + @"'
  MethodInfo = '" + MethodInfo + @"'
  FileName_ = '" + (FileName_ != null ? FileName_ : "null") + @"'
  LineNumber = '" + (LineNumber != null ? LineNumber : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="EventStackFrame" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class EventStackFrameUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public EventStackFrame UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public EventStackFrame ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
