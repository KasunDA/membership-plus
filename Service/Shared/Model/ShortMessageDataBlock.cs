//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "ShortMessageDataBlocks" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>SeqID</term>
    ///      <description>See <see cref="ShortMessageDataBlock.SeqID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>AttachmentID</term>
    ///      <description>See <see cref="ShortMessageDataBlock.AttachmentID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>SeqID</term>
    ///      <description>See <see cref="ShortMessageDataBlock.SeqID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>AttachmentID</term>
    ///      <description>See <see cref="ShortMessageDataBlock.AttachmentID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EndByte</term>
    ///      <description>See <see cref="ShortMessageDataBlock.EndByte" />. Fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>StartByte</term>
    ///      <description>See <see cref="ShortMessageDataBlock.StartByte" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>DataBlock</term>
    ///      <description>See <see cref="ShortMessageDataBlock.DataBlock" />. Editable; not null; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>DataHash</term>
    ///      <description>See <see cref="ShortMessageDataBlock.DataHash" />. Editable; not null; max-length = 64 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>AttachmentID</term>
    ///      <description>See <see cref="ShortMessageDataBlock.AttachmentID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ShortMessageAttachmentRef</term>
    ///      <description>See <see cref="ShortMessageDataBlock.ShortMessageAttachmentRef" />, which is a member of the data set "ShortMessageAttachments" for <see cref="ShortMessageAttachment" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class ShortMessageDataBlock : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.AttachmentID + ":" + this.SeqID.ToString();
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IShortMessageDataBlockService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "SeqID = " + SeqID + "\r\n";
                str += "AttachmentID = " + AttachmentID + "\r\n";
                if (IsDataBlockModified)
                    str += "Modified [DataBlock] = " + DataBlock + "\r\n";
                if (IsDataHashModified)
                    str += "Modified [DataHash] = " + DataHash + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"SeqID = {0}, AttachmentID = {1}", SeqID, AttachmentID.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ShortMessageDataBlock()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public ShortMessageDataBlock(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageDataBlock));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as ShortMessageDataBlock;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageDataBlock));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int SeqID
        { 
            get
            {
                return _SeqID;
            }
            set
            {
                if (_SeqID != value)
                {
                    _SeqID = value;
                }
            }
        }
        private int _SeqID = default(int);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string AttachmentID
        { 
            get
            {
                return _AttachmentID;
            }
            set
            {
                if (_AttachmentID != value)
                {
                    _AttachmentID = value;
                }
            }
        }
        private string _AttachmentID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public Int64 EndByte
        { 
            get
            {
                return _EndByte;
            }
            set
            {
                if (_EndByte != value)
                {
                    _EndByte = value;
                }
            }
        }
        private Int64 _EndByte = default(Int64);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public Int64 StartByte
        { 
            get
            {
                return _StartByte;
            }
            set
            {
                if (_StartByte != value)
                {
                    _StartByte = value;
                }
            }
        }
        private Int64 _StartByte = default(Int64);

        /// <summary>
        /// Meta-info: editable; not null; load delayed.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public byte[] DataBlock
        { 
            get
            {
                return _DataBlock;
            }
            set
            {
                if (_DataBlock != value)
                {
                    _DataBlock = value;
                    if (StartAutoUpdating)
                        IsDataBlockModified = true;
                    if (StartAutoUpdating)
                        IsDataBlockLoaded = value != null;
                }
            }
        }
        private byte[] _DataBlock = default(byte[]);

        /// <summary>
        /// Wether or not the value of <see cref="DataBlock" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DataBlock" /> only if this is set to true no matter what
        /// the actual value of <see cref="DataBlock" /> is.
        /// </summary>
        [DataMember]
        public bool IsDataBlockModified
        { 
            get
            {
                return _isDataBlockModified;
            }
            set
            {
                _isDataBlockModified = value;
            }
        }
        private bool _isDataBlockModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "DataBlock" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsDataBlockLoaded
        { 
            get
            {
                return _isDataBlockLoaded;
            }
            set
            {
                _isDataBlockLoaded = value;
            }
        }
        private bool _isDataBlockLoaded = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 64 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(64)]
        [DataMember(IsRequired = true)]
        public string DataHash
        { 
            get
            {
                return _DataHash;
            }
            set
            {
                if (_DataHash != value)
                {
                    _DataHash = value;
                    if (StartAutoUpdating)
                        IsDataHashModified = true;
                }
            }
        }
        private string _DataHash = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="DataHash" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DataHash" /> only if this is set to true no matter what
        /// the actual value of <see cref="DataHash" /> is.
        /// </summary>
        [DataMember]
        public bool IsDataHashModified
        { 
            get
            {
                return _isDataHashModified;
            }
            set
            {
                _isDataHashModified = value;
            }
        }
        private bool _isDataHashModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "ShortMessageAttachments" for <see cref="ShortMessageAttachment" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessageDataBlock.AttachmentID" /> }.
        /// </summary>
        [DataMember]
        public ShortMessageAttachment ShortMessageAttachmentRef
        {
            get 
            {
                if (_ShortMessageAttachmentRef == null && AutoLoadShortMessageAttachmentRef != null)
                    _ShortMessageAttachmentRef = AutoLoadShortMessageAttachmentRef();
                return _ShortMessageAttachmentRef; 
            }
            set 
            { 
                _ShortMessageAttachmentRef = value; 
            }
        }
        private ShortMessageAttachment _ShortMessageAttachmentRef = null;

        /// <summary>
        /// <see cref="ShortMessageDataBlock.ShortMessageAttachmentRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessageDataBlock.DelLoadShortMessageAttachmentRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadShortMessageAttachmentRef()
        {
            if (_ShortMessageAttachmentRef != null)
                return;
            if (DelLoadShortMessageAttachmentRef != null)
                _ShortMessageAttachmentRef = DelLoadShortMessageAttachmentRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessageDataBlock.ShortMessageAttachmentRef" />.
        /// </summary>
        public Func<ShortMessageAttachment> DelLoadShortMessageAttachmentRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessageDataBlock.ShortMessageAttachmentRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<ShortMessageAttachment> AutoLoadShortMessageAttachmentRef = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(ShortMessageDataBlock other)
        {
            if (other == null)
                return false;
            if (SeqID != other.SeqID)
                return false;
            if (AttachmentID != other.AttachmentID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(ShortMessageDataBlock other)
        {
            if (other == null)
                return false;
            else
                return SeqID == other.SeqID &&  AttachmentID == other.AttachmentID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(ShortMessageDataBlock from, ShortMessageDataBlock to)
        {
            if (to.IsPersisted)
            {
                if (from.IsDataBlockModified && !to.IsDataBlockModified)
                {
                    to.DataBlock = from.DataBlock;
                    to.IsDataBlockModified = true;
                }
                if (from.IsDataHashModified && !to.IsDataHashModified)
                {
                    to.DataHash = from.DataHash;
                    to.IsDataHashModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.SeqID = from.SeqID;
                to.AttachmentID = from.AttachmentID;
                to.EndByte = from.EndByte;
                to.StartByte = from.StartByte;
                to.DataBlock = from.DataBlock;
                to.IsDataBlockModified = from.IsDataBlockModified;
                to.DataHash = from.DataHash;
                to.IsDataHashModified = from.IsDataHashModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(ShortMessageDataBlock newdata)
        {
            int cnt = 0;
            bool bDataBlock = DataBlock == null && newdata.DataBlock != null ||
                                                         DataBlock != null && newdata.DataBlock == null ||
                                                         DataBlock != null && newdata.DataBlock != null && DataBlock.Length != newdata.DataBlock.Length;
            if (!bDataBlock && DataBlock != null)
            {
                for (int i = 0; i < DataBlock.Length; i++)
                {
                    bDataBlock = DataBlock[i] != newdata.DataBlock[i];
                    if (bDataBlock)
                        break;
                }
            }
            if (bDataBlock)
            {
                DataBlock = newdata.DataBlock;
                IsDataBlockModified = true;
                cnt++;
            }
            if (DataHash != newdata.DataHash)
            {
                DataHash = newdata.DataHash;
                IsDataHashModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (DataBlock == null)
                DataBlock = new byte[] { };
            if (DataHash == null)
                DataHash = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsDataBlockModified || IsDataHashModified;
            if (IsDataBlockModified && !IsDataBlockLoaded)
                IsDataBlockLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public ShortMessageDataBlock ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            ShortMessageDataBlock e = new ShortMessageDataBlock();
            e.StartAutoUpdating = false;
            e.SeqID = SeqID;
            e.AttachmentID = AttachmentID;
            e.EndByte = EndByte;
            e.StartByte = StartByte;
            e.DataHash = DataHash;
            if (preserveState)
                e.IsDataHashModified = IsDataHashModified;
            else
                e.IsDataHashModified = false;
            if (allData)
            {
                if (!checkLoadState || IsDataBlockLoaded)
                    e.DataBlock = DataBlock;
                if (preserveState)
                    e.IsDataBlockModified = IsDataBlockModified;
                else
                    e.IsDataBlockModified = false;
                e.IsDataBlockLoaded = IsDataBlockLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[ShortMessageDataBlock]] =====----
  SeqID = " + SeqID + @"");
            sb.Append(@" (natural id)");
            sb.Append(@"
  AttachmentID = '" + AttachmentID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  EndByte = " + EndByte + @"
  StartByte = " + StartByte + @"
  DataHash = '" + DataHash + @"'");
            if (IsDataHashModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="ShortMessageDataBlock" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class ShortMessageDataBlockUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public ShortMessageDataBlock UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public ShortMessageDataBlock ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
