//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "ShortMessageAttachments" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="ShortMessageAttachment.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="ShortMessageAttachment.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ContentBlockSize</term>
    ///      <description>See <see cref="ShortMessageAttachment.ContentBlockSize" />. Fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>DataCreateDate</term>
    ///      <description>See <see cref="ShortMessageAttachment.DataCreateDate" />. Fixed; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CompletedSize</term>
    ///      <description>See <see cref="ShortMessageAttachment.CompletedSize" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>DataMimeType</term>
    ///      <description>See <see cref="ShortMessageAttachment.DataMimeType" />. Editable; not null; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>FileName</term>
    ///      <description>See <see cref="ShortMessageAttachment.FileName" />. Editable; not null; max-length = 100 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ContentSize</term>
    ///      <description>See <see cref="ShortMessageAttachment.ContentSize" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>DataLastModified</term>
    ///      <description>See <see cref="ShortMessageAttachment.DataLastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>DataLink</term>
    ///      <description>See <see cref="ShortMessageAttachment.DataLink" />. Editable; nullable; max-length = 200 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>RelativePath</term>
    ///      <description>See <see cref="ShortMessageAttachment.RelativePath" />. Editable; nullable; max-length = 150 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MessageID</term>
    ///      <description>See <see cref="ShortMessageAttachment.MessageID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ShortMessageRef</term>
    ///      <description>See <see cref="ShortMessageAttachment.ShortMessageRef" />, which is a member of the data set "ShortMessages" for <see cref="ShortMessage" />.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ShortMessageDataBlocks</term>
    ///      <description>See <see cref="ShortMessageAttachment.ShortMessageDataBlocks" />, which is a sub-set of the data set "ShortMessageDataBlocks" for <see cref="ShortMessageDataBlock" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class ShortMessageAttachment : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IShortMessageAttachmentService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsCompletedSizeModified)
                    str += "Modified [CompletedSize] = " + CompletedSize + "\r\n";
                if (IsDataMimeTypeModified)
                    str += "Modified [DataMimeType] = " + DataMimeType + "\r\n";
                if (IsFileNameModified)
                    str += "Modified [FileName] = " + FileName + "\r\n";
                if (IsContentSizeModified)
                    str += "Modified [ContentSize] = " + ContentSize + "\r\n";
                if (IsDataLastModifiedModified)
                    str += "Modified [DataLastModified] = " + DataLastModified + "\r\n";
                if (IsDataLinkModified)
                    str += "Modified [DataLink] = " + DataLink + "\r\n";
                if (IsRelativePathModified)
                    str += "Modified [RelativePath] = " + RelativePath + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"ID = {0}", ID.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public ShortMessageAttachment()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public ShortMessageAttachment(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageAttachment));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as ShortMessageAttachment;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShortMessageAttachment));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int ContentBlockSize
        { 
            get
            {
                return _ContentBlockSize;
            }
            set
            {
                if (_ContentBlockSize != value)
                {
                    _ContentBlockSize = value;
                }
            }
        }
        private int _ContentBlockSize = default(int);

        /// <summary>
        /// Meta-info: fixed; nullable.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> DataCreateDate
        { 
            get
            {
                return _DataCreateDate;
            }
            set
            {
                if (_DataCreateDate != value)
                {
                    _DataCreateDate = value;
                }
            }
        }
        private System.Nullable<DateTime> _DataCreateDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public Int64 CompletedSize
        { 
            get
            {
                return _CompletedSize;
            }
            set
            {
                if (_CompletedSize != value)
                {
                    _CompletedSize = value;
                    if (StartAutoUpdating)
                        IsCompletedSizeModified = true;
                }
            }
        }
        private Int64 _CompletedSize = default(Int64);

        /// <summary>
        /// Wether or not the value of <see cref="CompletedSize" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="CompletedSize" /> only if this is set to true no matter what
        /// the actual value of <see cref="CompletedSize" /> is.
        /// </summary>
        [DataMember]
        public bool IsCompletedSizeModified
        { 
            get
            {
                return _isCompletedSizeModified;
            }
            set
            {
                _isCompletedSizeModified = value;
            }
        }
        private bool _isCompletedSizeModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 50 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = true)]
        public string DataMimeType
        { 
            get
            {
                return _DataMimeType;
            }
            set
            {
                if (_DataMimeType != value)
                {
                    _DataMimeType = value;
                    if (StartAutoUpdating)
                        IsDataMimeTypeModified = true;
                }
            }
        }
        private string _DataMimeType = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="DataMimeType" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DataMimeType" /> only if this is set to true no matter what
        /// the actual value of <see cref="DataMimeType" /> is.
        /// </summary>
        [DataMember]
        public bool IsDataMimeTypeModified
        { 
            get
            {
                return _isDataMimeTypeModified;
            }
            set
            {
                _isDataMimeTypeModified = value;
            }
        }
        private bool _isDataMimeTypeModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 100 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(100)]
        [DataMember(IsRequired = true)]
        public string FileName
        { 
            get
            {
                return _FileName;
            }
            set
            {
                if (_FileName != value)
                {
                    _FileName = value;
                    if (StartAutoUpdating)
                        IsFileNameModified = true;
                }
            }
        }
        private string _FileName = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="FileName" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="FileName" /> only if this is set to true no matter what
        /// the actual value of <see cref="FileName" /> is.
        /// </summary>
        [DataMember]
        public bool IsFileNameModified
        { 
            get
            {
                return _isFileNameModified;
            }
            set
            {
                _isFileNameModified = value;
            }
        }
        private bool _isFileNameModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<Int64> ContentSize
        { 
            get
            {
                return _ContentSize;
            }
            set
            {
                if (_ContentSize != value)
                {
                    _ContentSize = value;
                    if (StartAutoUpdating)
                        IsContentSizeModified = true;
                }
            }
        }
        private System.Nullable<Int64> _ContentSize = default(System.Nullable<Int64>);

        /// <summary>
        /// Wether or not the value of <see cref="ContentSize" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="ContentSize" /> only if this is set to true no matter what
        /// the actual value of <see cref="ContentSize" /> is.
        /// </summary>
        [DataMember]
        public bool IsContentSizeModified
        { 
            get
            {
                return _isContentSizeModified;
            }
            set
            {
                _isContentSizeModified = value;
            }
        }
        private bool _isContentSizeModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> DataLastModified
        { 
            get
            {
                return _DataLastModified;
            }
            set
            {
                if (_DataLastModified != value)
                {
                    _DataLastModified = value;
                    if (StartAutoUpdating)
                        IsDataLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _DataLastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="DataLastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DataLastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="DataLastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsDataLastModifiedModified
        { 
            get
            {
                return _isDataLastModifiedModified;
            }
            set
            {
                _isDataLastModifiedModified = value;
            }
        }
        private bool _isDataLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 200 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(200)]
        [DataMember(IsRequired = false)]
        public string DataLink
        { 
            get
            {
                return _DataLink;
            }
            set
            {
                if (_DataLink != value)
                {
                    _DataLink = value;
                    if (StartAutoUpdating)
                        IsDataLinkModified = true;
                }
            }
        }
        private string _DataLink = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="DataLink" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DataLink" /> only if this is set to true no matter what
        /// the actual value of <see cref="DataLink" /> is.
        /// </summary>
        [DataMember]
        public bool IsDataLinkModified
        { 
            get
            {
                return _isDataLinkModified;
            }
            set
            {
                _isDataLinkModified = value;
            }
        }
        private bool _isDataLinkModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 150 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(150)]
        [DataMember(IsRequired = false)]
        public string RelativePath
        { 
            get
            {
                return _RelativePath;
            }
            set
            {
                if (_RelativePath != value)
                {
                    _RelativePath = value;
                    if (StartAutoUpdating)
                        IsRelativePathModified = true;
                }
            }
        }
        private string _RelativePath = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="RelativePath" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="RelativePath" /> only if this is set to true no matter what
        /// the actual value of <see cref="RelativePath" /> is.
        /// </summary>
        [DataMember]
        public bool IsRelativePathModified
        { 
            get
            {
                return _isRelativePathModified;
            }
            set
            {
                _isRelativePathModified = value;
            }
        }
        private bool _isRelativePathModified = false;

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string MessageID
        { 
            get
            {
                return _MessageID;
            }
            set
            {
                if (_MessageID != value)
                {
                    _MessageID = value;
                }
            }
        }
        private string _MessageID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "ShortMessages" for <see cref="ShortMessage" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="ShortMessageAttachment.MessageID" /> }.
        /// </summary>
        [DataMember]
        public ShortMessage ShortMessageRef
        {
            get 
            {
                if (_ShortMessageRef == null && AutoLoadShortMessageRef != null)
                    _ShortMessageRef = AutoLoadShortMessageRef();
                return _ShortMessageRef; 
            }
            set 
            { 
                _ShortMessageRef = value; 
            }
        }
        private ShortMessage _ShortMessageRef = null;

        /// <summary>
        /// <see cref="ShortMessageAttachment.ShortMessageRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="ShortMessageAttachment.DelLoadShortMessageRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadShortMessageRef()
        {
            if (_ShortMessageRef != null)
                return;
            if (DelLoadShortMessageRef != null)
                _ShortMessageRef = DelLoadShortMessageRef();
        }

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAttachment.ShortMessageRef" />.
        /// </summary>
        public Func<ShortMessage> DelLoadShortMessageRef = null;

        /// <summary>
        /// A delegate to load <see cref="ShortMessageAttachment.ShortMessageRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<ShortMessage> AutoLoadShortMessageRef = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="ShortMessageDataBlockSet" /> for data set "ShortMessageDataBlocks" of <see cref="ShortMessageDataBlock" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageDataBlockSet" /> set is { <see cref="ShortMessageDataBlock.AttachmentID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageDataBlockSet ShortMessageDataBlocks
		{
			get
			{
                if (_ShortMessageDataBlocks == null)
                    _ShortMessageDataBlocks = new ShortMessageDataBlockSet();
				return _ShortMessageDataBlocks;
			}
            set
            {
                _ShortMessageDataBlocks = value;
            }
		}
		private ShortMessageDataBlockSet _ShortMessageDataBlocks = null;

        /// <summary>
        /// Entitites enumeration expression for data set "ShortMessageDataBlocks" of <see cref="ShortMessageDataBlock" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageDataBlockSet" /> set is { <see cref="ShortMessageDataBlock.AttachmentID" /> }.
        /// </summary>
		public IEnumerable<ShortMessageDataBlock> ShortMessageDataBlockEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="ShortMessageDataBlock" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="ShortMessageDataBlockSet" /> set is { <see cref="ShortMessageDataBlock.AttachmentID" /> }.
        /// </summary>
        [DataMember]
		public ShortMessageDataBlock[] ChangedShortMessageDataBlocks
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(ShortMessageAttachment other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(ShortMessageAttachment other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(ShortMessageAttachment from, ShortMessageAttachment to)
        {
            if (to.IsPersisted)
            {
                if (from.IsCompletedSizeModified && !to.IsCompletedSizeModified)
                {
                    to.CompletedSize = from.CompletedSize;
                    to.IsCompletedSizeModified = true;
                }
                if (from.IsDataMimeTypeModified && !to.IsDataMimeTypeModified)
                {
                    to.DataMimeType = from.DataMimeType;
                    to.IsDataMimeTypeModified = true;
                }
                if (from.IsFileNameModified && !to.IsFileNameModified)
                {
                    to.FileName = from.FileName;
                    to.IsFileNameModified = true;
                }
                if (from.IsContentSizeModified && !to.IsContentSizeModified)
                {
                    to.ContentSize = from.ContentSize;
                    to.IsContentSizeModified = true;
                }
                if (from.IsDataLastModifiedModified && !to.IsDataLastModifiedModified)
                {
                    to.DataLastModified = from.DataLastModified;
                    to.IsDataLastModifiedModified = true;
                }
                if (from.IsDataLinkModified && !to.IsDataLinkModified)
                {
                    to.DataLink = from.DataLink;
                    to.IsDataLinkModified = true;
                }
                if (from.IsRelativePathModified && !to.IsRelativePathModified)
                {
                    to.RelativePath = from.RelativePath;
                    to.IsRelativePathModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.ContentBlockSize = from.ContentBlockSize;
                to.DataCreateDate = from.DataCreateDate;
                to.CompletedSize = from.CompletedSize;
                to.IsCompletedSizeModified = from.IsCompletedSizeModified;
                to.DataMimeType = from.DataMimeType;
                to.IsDataMimeTypeModified = from.IsDataMimeTypeModified;
                to.FileName = from.FileName;
                to.IsFileNameModified = from.IsFileNameModified;
                to.ContentSize = from.ContentSize;
                to.IsContentSizeModified = from.IsContentSizeModified;
                to.DataLastModified = from.DataLastModified;
                to.IsDataLastModifiedModified = from.IsDataLastModifiedModified;
                to.DataLink = from.DataLink;
                to.IsDataLinkModified = from.IsDataLinkModified;
                to.RelativePath = from.RelativePath;
                to.IsRelativePathModified = from.IsRelativePathModified;
                to.MessageID = from.MessageID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(ShortMessageAttachment newdata)
        {
            int cnt = 0;
            if (CompletedSize != newdata.CompletedSize)
            {
                CompletedSize = newdata.CompletedSize;
                IsCompletedSizeModified = true;
                cnt++;
            }
            if (DataMimeType != newdata.DataMimeType)
            {
                DataMimeType = newdata.DataMimeType;
                IsDataMimeTypeModified = true;
                cnt++;
            }
            if (FileName != newdata.FileName)
            {
                FileName = newdata.FileName;
                IsFileNameModified = true;
                cnt++;
            }
            if (ContentSize != newdata.ContentSize)
            {
                ContentSize = newdata.ContentSize;
                IsContentSizeModified = true;
                cnt++;
            }
            if (DataLastModified != newdata.DataLastModified)
            {
                DataLastModified = newdata.DataLastModified;
                IsDataLastModifiedModified = true;
                cnt++;
            }
            if (DataLink != newdata.DataLink)
            {
                DataLink = newdata.DataLink;
                IsDataLinkModified = true;
                cnt++;
            }
            if (RelativePath != newdata.RelativePath)
            {
                RelativePath = newdata.RelativePath;
                IsRelativePathModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (DataMimeType == null)
                DataMimeType = "";
            if (FileName == null)
                FileName = "";
            if (MessageID == null)
                MessageID = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsCompletedSizeModified || IsDataMimeTypeModified || IsFileNameModified || IsContentSizeModified || IsDataLastModifiedModified || IsDataLinkModified || IsRelativePathModified;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public ShortMessageAttachment ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            ShortMessageAttachment e = new ShortMessageAttachment();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.ContentBlockSize = ContentBlockSize;
            e.DataCreateDate = DataCreateDate;
            e.CompletedSize = CompletedSize;
            if (preserveState)
                e.IsCompletedSizeModified = IsCompletedSizeModified;
            else
                e.IsCompletedSizeModified = false;
            e.DataMimeType = DataMimeType;
            if (preserveState)
                e.IsDataMimeTypeModified = IsDataMimeTypeModified;
            else
                e.IsDataMimeTypeModified = false;
            e.FileName = FileName;
            if (preserveState)
                e.IsFileNameModified = IsFileNameModified;
            else
                e.IsFileNameModified = false;
            e.ContentSize = ContentSize;
            if (preserveState)
                e.IsContentSizeModified = IsContentSizeModified;
            else
                e.IsContentSizeModified = false;
            e.DataLastModified = DataLastModified;
            if (preserveState)
                e.IsDataLastModifiedModified = IsDataLastModifiedModified;
            else
                e.IsDataLastModifiedModified = false;
            e.DataLink = DataLink;
            if (preserveState)
                e.IsDataLinkModified = IsDataLinkModified;
            else
                e.IsDataLinkModified = false;
            e.RelativePath = RelativePath;
            if (preserveState)
                e.IsRelativePathModified = IsRelativePathModified;
            else
                e.IsRelativePathModified = false;
            e.MessageID = MessageID;
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[ShortMessageAttachment]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  ContentBlockSize = " + ContentBlockSize + @"
  DataCreateDate = " + (DataCreateDate.HasValue ? DataCreateDate.Value.ToString() : "null") + @"
  CompletedSize = " + CompletedSize + @"");
            if (IsCompletedSizeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  DataMimeType = '" + DataMimeType + @"'");
            if (IsDataMimeTypeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  FileName = '" + FileName + @"'");
            if (IsFileNameModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ContentSize = " + (ContentSize.HasValue ? ContentSize.Value.ToString() : "null") + @"");
            if (IsContentSizeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  DataLastModified = " + (DataLastModified.HasValue ? DataLastModified.Value.ToString() : "null") + @"");
            if (IsDataLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  DataLink = '" + (DataLink != null ? DataLink : "null") + @"'");
            if (IsDataLinkModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  RelativePath = '" + (RelativePath != null ? RelativePath : "null") + @"'");
            if (IsRelativePathModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MessageID = '" + MessageID + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="ShortMessageAttachment" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class ShortMessageAttachmentUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public ShortMessageAttachment UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public ShortMessageAttachment ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
