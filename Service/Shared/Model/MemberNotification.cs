//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "MemberNotifications" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="MemberNotification.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="MemberNotification.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreatedDate</term>
    ///      <description>See <see cref="MemberNotification.CreatedDate" />. Fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>PriorityLevel</term>
    ///      <description>See <see cref="MemberNotification.PriorityLevel" />. Fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>Title</term>
    ///      <description>See <see cref="MemberNotification.Title" />. Fixed; not null; max-length = 100 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>NoticeMsg</term>
    ///      <description>See <see cref="MemberNotification.NoticeMsg" />. Fixed; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>ReadOnce</term>
    ///      <description>See <see cref="MemberNotification.ReadOnce" />. Fixed; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ReadCount</term>
    ///      <description>See <see cref="MemberNotification.ReadCount" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>Boockmarked</term>
    ///      <description>See <see cref="MemberNotification.Boockmarked" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>NoticeData</term>
    ///      <description>See <see cref="MemberNotification.NoticeData" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>Processed</term>
    ///      <description>See <see cref="MemberNotification.Processed" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>ProcessedDate</term>
    ///      <description>See <see cref="MemberNotification.ProcessedDate" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="MemberNotification.ApplicationID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>TypeID</term>
    ///      <description>See <see cref="MemberNotification.TypeID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="MemberNotification.UserID" />. Fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="MemberNotification.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>MemberNotificationTypeRef</term>
    ///      <description>See <see cref="MemberNotification.MemberNotificationTypeRef" />, which is a member of the data set "MemberNotificationTypes" for <see cref="MemberNotificationType" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserRef</term>
    ///      <description>See <see cref="MemberNotification.UserRef" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>NotificationTaskSchedules</term>
    ///      <description>See <see cref="MemberNotification.NotificationTaskSchedules" />, which is a sub-set of the data set "NotificationTaskSchedules" for <see cref="NotificationTaskSchedule" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class MemberNotification : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IMemberNotificationService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsReadCountModified)
                    str += "Modified [ReadCount] = " + ReadCount + "\r\n";
                if (IsBoockmarkedModified)
                    str += "Modified [Boockmarked] = " + Boockmarked + "\r\n";
                if (IsNoticeDataModified)
                    str += "Modified [NoticeData] = " + NoticeData + "\r\n";
                if (IsProcessedModified)
                    str += "Modified [Processed] = " + Processed + "\r\n";
                if (IsProcessedDateModified)
                    str += "Modified [ProcessedDate] = " + ProcessedDate + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadMemberNotificationTypeRef();
            return String.Format(@"[{0}] {1} ({2})", (MemberNotificationTypeRef != null ? MemberNotificationTypeRef.DistinctString : ""), Title.Trim(), CreatedDate);
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public MemberNotification()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public MemberNotification(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(MemberNotification));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as MemberNotification;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(MemberNotification));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreatedDate
        { 
            get
            {
                return _CreatedDate;
            }
            set
            {
                if (_CreatedDate != value)
                {
                    _CreatedDate = value;
                }
            }
        }
        private DateTime _CreatedDate = default(DateTime);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public short PriorityLevel
        { 
            get
            {
                return _PriorityLevel;
            }
            set
            {
                if (_PriorityLevel != value)
                {
                    _PriorityLevel = value;
                }
            }
        }
        private short _PriorityLevel = default(short);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 100 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(100)]
        [DataMember(IsRequired = true)]
        public string Title
        { 
            get
            {
                return _Title;
            }
            set
            {
                if (_Title != value)
                {
                    _Title = value;
                }
            }
        }
        private string _Title = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; load delayed.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string NoticeMsg
        { 
            get
            {
                return _NoticeMsg;
            }
            set
            {
                if (_NoticeMsg != value)
                {
                    _NoticeMsg = value;
                    if (StartAutoUpdating)
                        IsNoticeMsgLoaded = value != null;
                }
            }
        }
        private string _NoticeMsg = default(string);

        /// <summary>
        /// Wether or not the value of the delay loaded "NoticeMsg" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsNoticeMsgLoaded
        { 
            get
            {
                return _isNoticeMsgLoaded;
            }
            set
            {
                _isNoticeMsgLoaded = value;
            }
        }
        private bool _isNoticeMsgLoaded = false;

        /// <summary>
        /// Meta-info: fixed; nullable.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> ReadOnce
        { 
            get
            {
                return _ReadOnce;
            }
            set
            {
                if (_ReadOnce != value)
                {
                    _ReadOnce = value;
                }
            }
        }
        private System.Nullable<bool> _ReadOnce = default(System.Nullable<bool>);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public short ReadCount
        { 
            get
            {
                return _ReadCount;
            }
            set
            {
                if (_ReadCount != value)
                {
                    _ReadCount = value;
                    if (StartAutoUpdating)
                        IsReadCountModified = true;
                }
            }
        }
        private short _ReadCount = default(short);

        /// <summary>
        /// Wether or not the value of <see cref="ReadCount" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="ReadCount" /> only if this is set to true no matter what
        /// the actual value of <see cref="ReadCount" /> is.
        /// </summary>
        [DataMember]
        public bool IsReadCountModified
        { 
            get
            {
                return _isReadCountModified;
            }
            set
            {
                _isReadCountModified = value;
            }
        }
        private bool _isReadCountModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> Boockmarked
        { 
            get
            {
                return _Boockmarked;
            }
            set
            {
                if (_Boockmarked != value)
                {
                    _Boockmarked = value;
                    if (StartAutoUpdating)
                        IsBoockmarkedModified = true;
                }
            }
        }
        private System.Nullable<bool> _Boockmarked = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="Boockmarked" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Boockmarked" /> only if this is set to true no matter what
        /// the actual value of <see cref="Boockmarked" /> is.
        /// </summary>
        [DataMember]
        public bool IsBoockmarkedModified
        { 
            get
            {
                return _isBoockmarkedModified;
            }
            set
            {
                _isBoockmarkedModified = value;
            }
        }
        private bool _isBoockmarkedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public string NoticeData
        { 
            get
            {
                return _NoticeData;
            }
            set
            {
                if (_NoticeData != value)
                {
                    _NoticeData = value;
                    if (StartAutoUpdating)
                        IsNoticeDataModified = true;
                    if (StartAutoUpdating)
                        IsNoticeDataLoaded = value != null;
                }
            }
        }
        private string _NoticeData = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="NoticeData" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="NoticeData" /> only if this is set to true no matter what
        /// the actual value of <see cref="NoticeData" /> is.
        /// </summary>
        [DataMember]
        public bool IsNoticeDataModified
        { 
            get
            {
                return _isNoticeDataModified;
            }
            set
            {
                _isNoticeDataModified = value;
            }
        }
        private bool _isNoticeDataModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "NoticeData" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsNoticeDataLoaded
        { 
            get
            {
                return _isNoticeDataLoaded;
            }
            set
            {
                _isNoticeDataLoaded = value;
            }
        }
        private bool _isNoticeDataLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> Processed
        { 
            get
            {
                return _Processed;
            }
            set
            {
                if (_Processed != value)
                {
                    _Processed = value;
                    if (StartAutoUpdating)
                        IsProcessedModified = true;
                }
            }
        }
        private System.Nullable<bool> _Processed = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="Processed" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Processed" /> only if this is set to true no matter what
        /// the actual value of <see cref="Processed" /> is.
        /// </summary>
        [DataMember]
        public bool IsProcessedModified
        { 
            get
            {
                return _isProcessedModified;
            }
            set
            {
                _isProcessedModified = value;
            }
        }
        private bool _isProcessedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> ProcessedDate
        { 
            get
            {
                return _ProcessedDate;
            }
            set
            {
                if (_ProcessedDate != value)
                {
                    _ProcessedDate = value;
                    if (StartAutoUpdating)
                        IsProcessedDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _ProcessedDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="ProcessedDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="ProcessedDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="ProcessedDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsProcessedDateModified
        { 
            get
            {
                return _isProcessedDateModified;
            }
            set
            {
                _isProcessedDateModified = value;
            }
        }
        private bool _isProcessedDateModified = false;

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int TypeID
        { 
            get
            {
                return _TypeID;
            }
            set
            {
                if (_TypeID != value)
                {
                    _TypeID = value;
                }
            }
        }
        private int _TypeID = default(int);

        /// <summary>
        /// Meta-info: fixed; not null; foreign key.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string UserID
        { 
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                }
            }
        }
        private string _UserID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="MemberNotification.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="MemberNotification.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="MemberNotification.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (_Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "MemberNotificationTypes" for <see cref="MemberNotificationType" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="MemberNotification.TypeID" /> }.
        /// </summary>
        [DataMember]
        public MemberNotificationType MemberNotificationTypeRef
        {
            get 
            {
                if (_MemberNotificationTypeRef == null && AutoLoadMemberNotificationTypeRef != null)
                    _MemberNotificationTypeRef = AutoLoadMemberNotificationTypeRef();
                return _MemberNotificationTypeRef; 
            }
            set 
            { 
                _MemberNotificationTypeRef = value; 
            }
        }
        private MemberNotificationType _MemberNotificationTypeRef = null;

        /// <summary>
        /// <see cref="MemberNotification.MemberNotificationTypeRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="MemberNotification.DelLoadMemberNotificationTypeRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadMemberNotificationTypeRef()
        {
            if (_MemberNotificationTypeRef != null)
                return;
            if (DelLoadMemberNotificationTypeRef != null)
                _MemberNotificationTypeRef = DelLoadMemberNotificationTypeRef();
        }

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.MemberNotificationTypeRef" />.
        /// </summary>
        public Func<MemberNotificationType> DelLoadMemberNotificationTypeRef = null;

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.MemberNotificationTypeRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<MemberNotificationType> AutoLoadMemberNotificationTypeRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="MemberNotification.UserID" /> }.
        /// </summary>
        [DataMember]
        public User UserRef
        {
            get 
            {
                if (_UserRef == null && AutoLoadUserRef != null)
                    _UserRef = AutoLoadUserRef();
                return _UserRef; 
            }
            set 
            { 
                _UserRef = value; 
            }
        }
        private User _UserRef = null;

        /// <summary>
        /// <see cref="MemberNotification.UserRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="MemberNotification.DelLoadUserRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserRef()
        {
            if (_UserRef != null)
                return;
            if (DelLoadUserRef != null)
                _UserRef = DelLoadUserRef();
        }

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.UserRef" />.
        /// </summary>
        public Func<User> DelLoadUserRef = null;

        /// <summary>
        /// A delegate to load <see cref="MemberNotification.UserRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUserRef = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="NotificationTaskScheduleSet" /> for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.NotificationID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskScheduleSet NotificationTaskSchedules
		{
			get
			{
                if (_NotificationTaskSchedules == null)
                    _NotificationTaskSchedules = new NotificationTaskScheduleSet();
				return _NotificationTaskSchedules;
			}
            set
            {
                _NotificationTaskSchedules = value;
            }
		}
		private NotificationTaskScheduleSet _NotificationTaskSchedules = null;

        /// <summary>
        /// Entitites enumeration expression for data set "NotificationTaskSchedules" of <see cref="NotificationTaskSchedule" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.NotificationID" /> }.
        /// </summary>
		public IEnumerable<NotificationTaskSchedule> NotificationTaskScheduleEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="NotificationTaskSchedule" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="NotificationTaskScheduleSet" /> set is { <see cref="NotificationTaskSchedule.NotificationID" /> }.
        /// </summary>
        [DataMember]
		public NotificationTaskSchedule[] ChangedNotificationTaskSchedules
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(MemberNotification other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(MemberNotification other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(MemberNotification from, MemberNotification to)
        {
            if (to.IsPersisted)
            {
                if (from.IsReadCountModified && !to.IsReadCountModified)
                {
                    to.ReadCount = from.ReadCount;
                    to.IsReadCountModified = true;
                }
                if (from.IsBoockmarkedModified && !to.IsBoockmarkedModified)
                {
                    to.Boockmarked = from.Boockmarked;
                    to.IsBoockmarkedModified = true;
                }
                if (from.IsNoticeDataModified && !to.IsNoticeDataModified)
                {
                    to.NoticeData = from.NoticeData;
                    to.IsNoticeDataModified = true;
                }
                if (from.IsProcessedModified && !to.IsProcessedModified)
                {
                    to.Processed = from.Processed;
                    to.IsProcessedModified = true;
                }
                if (from.IsProcessedDateModified && !to.IsProcessedDateModified)
                {
                    to.ProcessedDate = from.ProcessedDate;
                    to.IsProcessedDateModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.CreatedDate = from.CreatedDate;
                to.PriorityLevel = from.PriorityLevel;
                to.Title = from.Title;
                to.NoticeMsg = from.NoticeMsg;
                to.ReadOnce = from.ReadOnce;
                to.ReadCount = from.ReadCount;
                to.IsReadCountModified = from.IsReadCountModified;
                to.Boockmarked = from.Boockmarked;
                to.IsBoockmarkedModified = from.IsBoockmarkedModified;
                to.NoticeData = from.NoticeData;
                to.IsNoticeDataModified = from.IsNoticeDataModified;
                to.Processed = from.Processed;
                to.IsProcessedModified = from.IsProcessedModified;
                to.ProcessedDate = from.ProcessedDate;
                to.IsProcessedDateModified = from.IsProcessedDateModified;
                to.ApplicationID = from.ApplicationID;
                to.TypeID = from.TypeID;
                to.UserID = from.UserID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(MemberNotification newdata)
        {
            int cnt = 0;
            if (ReadCount != newdata.ReadCount)
            {
                ReadCount = newdata.ReadCount;
                IsReadCountModified = true;
                cnt++;
            }
            if (Boockmarked != newdata.Boockmarked)
            {
                Boockmarked = newdata.Boockmarked;
                IsBoockmarkedModified = true;
                cnt++;
            }
            if (NoticeData != newdata.NoticeData)
            {
                NoticeData = newdata.NoticeData;
                IsNoticeDataModified = true;
                cnt++;
            }
            if (Processed != newdata.Processed)
            {
                Processed = newdata.Processed;
                IsProcessedModified = true;
                cnt++;
            }
            if (ProcessedDate != newdata.ProcessedDate)
            {
                ProcessedDate = newdata.ProcessedDate;
                IsProcessedDateModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (Title == null)
                Title = "";
            if (ApplicationID == null)
                ApplicationID = "";
            if (UserID == null)
                UserID = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsReadCountModified || IsBoockmarkedModified || IsNoticeDataModified || IsProcessedModified || IsProcessedDateModified;
            if (IsNoticeDataModified && !IsNoticeDataLoaded)
                IsNoticeDataLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public MemberNotification ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            MemberNotification e = new MemberNotification();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.CreatedDate = CreatedDate;
            e.PriorityLevel = PriorityLevel;
            e.Title = Title;
            e.ReadOnce = ReadOnce;
            e.ReadCount = ReadCount;
            if (preserveState)
                e.IsReadCountModified = IsReadCountModified;
            else
                e.IsReadCountModified = false;
            e.Boockmarked = Boockmarked;
            if (preserveState)
                e.IsBoockmarkedModified = IsBoockmarkedModified;
            else
                e.IsBoockmarkedModified = false;
            e.Processed = Processed;
            if (preserveState)
                e.IsProcessedModified = IsProcessedModified;
            else
                e.IsProcessedModified = false;
            e.ProcessedDate = ProcessedDate;
            if (preserveState)
                e.IsProcessedDateModified = IsProcessedDateModified;
            else
                e.IsProcessedDateModified = false;
            e.ApplicationID = ApplicationID;
            e.TypeID = TypeID;
            e.UserID = UserID;
            if (allData)
            {
                if (!checkLoadState || IsNoticeMsgLoaded)
                    e.NoticeMsg = NoticeMsg;
                e.IsNoticeMsgLoaded = IsNoticeMsgLoaded;
                if (!checkLoadState || IsNoticeDataLoaded)
                    e.NoticeData = NoticeData;
                if (preserveState)
                    e.IsNoticeDataModified = IsNoticeDataModified;
                else
                    e.IsNoticeDataModified = false;
                e.IsNoticeDataLoaded = IsNoticeDataLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[MemberNotification]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreatedDate = " + CreatedDate + @"
  PriorityLevel = " + PriorityLevel + @"
  Title = '" + Title + @"'
  ReadOnce = " + (ReadOnce.HasValue ? ReadOnce.Value.ToString() : "null") + @"
  ReadCount = " + ReadCount + @"");
            if (IsReadCountModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Boockmarked = " + (Boockmarked.HasValue ? Boockmarked.Value.ToString() : "null") + @"");
            if (IsBoockmarkedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Processed = " + (Processed.HasValue ? Processed.Value.ToString() : "null") + @"");
            if (IsProcessedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ProcessedDate = " + (ProcessedDate.HasValue ? ProcessedDate.Value.ToString() : "null") + @"");
            if (IsProcessedDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ApplicationID = '" + ApplicationID + @"'
  TypeID = " + TypeID + @"
  UserID = '" + UserID + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="MemberNotification" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class MemberNotificationUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public MemberNotification UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public MemberNotification ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
