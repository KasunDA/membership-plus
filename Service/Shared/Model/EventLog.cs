//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "EventLogs" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventLog.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="EventLog.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventLevel</term>
    ///      <description>See <see cref="EventLog.EventLevel" />. Fixed; not null; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LoggerName</term>
    ///      <description>See <see cref="EventLog.LoggerName" />. Fixed; not null; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>Message_</term>
    ///      <description>See <see cref="EventLog.Message_" />. Fixed; not null; max-length = 2500 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>TimeStamp_</term>
    ///      <description>See <see cref="EventLog.TimeStamp_" />. Fixed; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>AppAgent</term>
    ///      <description>See <see cref="EventLog.AppAgent" />. Fixed; nullable; max-length = 100 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>AppDomain</term>
    ///      <description>See <see cref="EventLog.AppDomain" />. Fixed; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>CallTrackID</term>
    ///      <description>See <see cref="EventLog.CallTrackID" />. Fixed; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ExceptionInfo</term>
    ///      <description>See <see cref="EventLog.ExceptionInfo" />. Fixed; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>MessageLong</term>
    ///      <description>See <see cref="EventLog.MessageLong" />. Fixed; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>PageUrl</term>
    ///      <description>See <see cref="EventLog.PageUrl" />. Fixed; nullable; max-length = 220 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ReferringUrl</term>
    ///      <description>See <see cref="EventLog.ReferringUrl" />. Fixed; nullable; max-length = 220 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ThreadName_</term>
    ///      <description>See <see cref="EventLog.ThreadName_" />. Fixed; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ThreadPrincipal</term>
    ///      <description>See <see cref="EventLog.ThreadPrincipal" />. Fixed; nullable; max-length = 120 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>Username</term>
    ///      <description>See <see cref="EventLog.Username" />. Fixed; nullable; max-length = 128 characters.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>AppID</term>
    ///      <description>See <see cref="EventLog.AppID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="EventLog.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />. Nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>EventLocations</term>
    ///      <description>See <see cref="EventLog.EventLocations" />, which is a sub-set of the data set "EventLocations" for <see cref="EventLocation" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class EventLog : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IEventLogService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"ID = {0}", ID.Trim());
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventLog()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public EventLog(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventLog));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as EventLog;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EventLog));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 50 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = true)]
        public string EventLevel
        { 
            get
            {
                return _EventLevel;
            }
            set
            {
                if (_EventLevel != value)
                {
                    _EventLevel = value;
                }
            }
        }
        private string _EventLevel = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 50 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = true)]
        public string LoggerName
        { 
            get
            {
                return _LoggerName;
            }
            set
            {
                if (_LoggerName != value)
                {
                    _LoggerName = value;
                }
            }
        }
        private string _LoggerName = default(string);

        /// <summary>
        /// Meta-info: fixed; not null; max-length = 2500 characters.
        /// </summary>
        [Required]
        [Editable(false)]
        [StringLength(2500)]
        [DataMember(IsRequired = true)]
        public string Message_
        { 
            get
            {
                return _Message_;
            }
            set
            {
                if (_Message_ != value)
                {
                    _Message_ = value;
                }
            }
        }
        private string _Message_ = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public Int64 TimeStamp_
        { 
            get
            {
                return _TimeStamp_;
            }
            set
            {
                if (_TimeStamp_ != value)
                {
                    _TimeStamp_ = value;
                }
            }
        }
        private Int64 _TimeStamp_ = default(Int64);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 100 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(100)]
        [DataMember(IsRequired = false)]
        public string AppAgent
        { 
            get
            {
                return _AppAgent;
            }
            set
            {
                if (_AppAgent != value)
                {
                    _AppAgent = value;
                }
            }
        }
        private string _AppAgent = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string AppDomain
        { 
            get
            {
                return _AppDomain;
            }
            set
            {
                if (_AppDomain != value)
                {
                    _AppDomain = value;
                }
            }
        }
        private string _AppDomain = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string CallTrackID
        { 
            get
            {
                return _CallTrackID;
            }
            set
            {
                if (_CallTrackID != value)
                {
                    _CallTrackID = value;
                }
            }
        }
        private string _CallTrackID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; load delayed.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ExceptionInfo
        { 
            get
            {
                return _ExceptionInfo;
            }
            set
            {
                if (_ExceptionInfo != value)
                {
                    _ExceptionInfo = value;
                    if (StartAutoUpdating)
                        IsExceptionInfoLoaded = value != null;
                }
            }
        }
        private string _ExceptionInfo = default(string);

        /// <summary>
        /// Wether or not the value of the delay loaded "ExceptionInfo" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsExceptionInfoLoaded
        { 
            get
            {
                return _isExceptionInfoLoaded;
            }
            set
            {
                _isExceptionInfoLoaded = value;
            }
        }
        private bool _isExceptionInfoLoaded = false;

        /// <summary>
        /// Meta-info: fixed; nullable; load delayed.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string MessageLong
        { 
            get
            {
                return _MessageLong;
            }
            set
            {
                if (_MessageLong != value)
                {
                    _MessageLong = value;
                    if (StartAutoUpdating)
                        IsMessageLongLoaded = value != null;
                }
            }
        }
        private string _MessageLong = default(string);

        /// <summary>
        /// Wether or not the value of the delay loaded "MessageLong" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsMessageLongLoaded
        { 
            get
            {
                return _isMessageLongLoaded;
            }
            set
            {
                _isMessageLongLoaded = value;
            }
        }
        private bool _isMessageLongLoaded = false;

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 220 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(220)]
        [DataMember(IsRequired = false)]
        public string PageUrl
        { 
            get
            {
                return _PageUrl;
            }
            set
            {
                if (_PageUrl != value)
                {
                    _PageUrl = value;
                }
            }
        }
        private string _PageUrl = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 220 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(220)]
        [DataMember(IsRequired = false)]
        public string ReferringUrl
        { 
            get
            {
                return _ReferringUrl;
            }
            set
            {
                if (_ReferringUrl != value)
                {
                    _ReferringUrl = value;
                }
            }
        }
        private string _ReferringUrl = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string ThreadName_
        { 
            get
            {
                return _ThreadName_;
            }
            set
            {
                if (_ThreadName_ != value)
                {
                    _ThreadName_ = value;
                }
            }
        }
        private string _ThreadName_ = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 120 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(120)]
        [DataMember(IsRequired = false)]
        public string ThreadPrincipal
        { 
            get
            {
                return _ThreadPrincipal;
            }
            set
            {
                if (_ThreadPrincipal != value)
                {
                    _ThreadPrincipal = value;
                }
            }
        }
        private string _ThreadPrincipal = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; max-length = 128 characters.
        /// </summary>
        [Editable(false)]
        [StringLength(128)]
        [DataMember(IsRequired = false)]
        public string Username
        { 
            get
            {
                return _Username;
            }
            set
            {
                if (_Username != value)
                {
                    _Username = value;
                }
            }
        }
        private string _Username = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string AppID
        { 
            get
            {
                return _AppID;
            }
            set
            {
                if (_AppID != value)
                {
                    _AppID = value;
                }
            }
        }
        private string _AppID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="EventLog.AppID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (AppID == null)
                    return null;
                else if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="EventLog.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="EventLog.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (AppID == null || _Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="EventLog.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="EventLog.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="EventLocationSet" /> for data set "EventLocations" of <see cref="EventLocation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventLocationSet" /> set is { <see cref="EventLocation.EventID" /> }.
        /// </summary>
        [DataMember]
		public EventLocationSet EventLocations
		{
			get
			{
                if (_EventLocations == null)
                    _EventLocations = new EventLocationSet();
				return _EventLocations;
			}
            set
            {
                _EventLocations = value;
            }
		}
		private EventLocationSet _EventLocations = null;

        /// <summary>
        /// Entitites enumeration expression for data set "EventLocations" of <see cref="EventLocation" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="EventLocationSet" /> set is { <see cref="EventLocation.EventID" /> }.
        /// </summary>
		public IEnumerable<EventLocation> EventLocationEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="EventLocation" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="EventLocationSet" /> set is { <see cref="EventLocation.EventID" /> }.
        /// </summary>
        [DataMember]
		public EventLocation[] ChangedEventLocations
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(EventLog other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(EventLog other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(EventLog from, EventLog to)
        {
            if (to.IsPersisted)
            {
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.EventLevel = from.EventLevel;
                to.LoggerName = from.LoggerName;
                to.Message_ = from.Message_;
                to.TimeStamp_ = from.TimeStamp_;
                to.AppAgent = from.AppAgent;
                to.AppDomain = from.AppDomain;
                to.CallTrackID = from.CallTrackID;
                to.ExceptionInfo = from.ExceptionInfo;
                to.MessageLong = from.MessageLong;
                to.PageUrl = from.PageUrl;
                to.ReferringUrl = from.ReferringUrl;
                to.ThreadName_ = from.ThreadName_;
                to.ThreadPrincipal = from.ThreadPrincipal;
                to.Username = from.Username;
                to.AppID = from.AppID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(EventLog newdata)
        {
            int cnt = 0;
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (EventLevel == null)
                EventLevel = "";
            if (LoggerName == null)
                LoggerName = "";
            if (Message_ == null)
                Message_ = "";
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public EventLog ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            EventLog e = new EventLog();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.EventLevel = EventLevel;
            e.LoggerName = LoggerName;
            e.Message_ = Message_;
            e.TimeStamp_ = TimeStamp_;
            e.AppAgent = AppAgent;
            e.AppDomain = AppDomain;
            e.CallTrackID = CallTrackID;
            e.PageUrl = PageUrl;
            e.ReferringUrl = ReferringUrl;
            e.ThreadName_ = ThreadName_;
            e.ThreadPrincipal = ThreadPrincipal;
            e.Username = Username;
            e.AppID = AppID;
            if (allData)
            {
                if (!checkLoadState || IsExceptionInfoLoaded)
                    e.ExceptionInfo = ExceptionInfo;
                e.IsExceptionInfoLoaded = IsExceptionInfoLoaded;
                if (!checkLoadState || IsMessageLongLoaded)
                    e.MessageLong = MessageLong;
                e.IsMessageLongLoaded = IsMessageLongLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[EventLog]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  EventLevel = '" + EventLevel + @"'
  LoggerName = '" + LoggerName + @"'
  Message_ = '" + Message_ + @"'
  TimeStamp_ = " + TimeStamp_ + @"
  AppAgent = '" + (AppAgent != null ? AppAgent : "null") + @"'
  AppDomain = '" + (AppDomain != null ? AppDomain : "null") + @"'
  CallTrackID = '" + (CallTrackID != null ? CallTrackID : "null") + @"'
  PageUrl = '" + (PageUrl != null ? PageUrl : "null") + @"'
  ReferringUrl = '" + (ReferringUrl != null ? ReferringUrl : "null") + @"'
  ThreadName_ = '" + (ThreadName_ != null ? ThreadName_ : "null") + @"'
  ThreadPrincipal = '" + (ThreadPrincipal != null ? ThreadPrincipal : "null") + @"'
  Username = '" + (Username != null ? Username : "null") + @"'
  AppID = '" + (AppID != null ? AppID : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="EventLog" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class EventLogUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public EventLog UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public EventLog ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
