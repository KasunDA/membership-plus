//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserGroupAdminRoles" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="UserGroupAdminRole.GroupID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>RoleID</term>
    ///      <description>See <see cref="UserGroupAdminRole.RoleID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="UserGroupAdminRole.GroupID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>RoleID</term>
    ///      <description>See <see cref="UserGroupAdminRole.RoleID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreateDate</term>
    ///      <description>See <see cref="UserGroupAdminRole.CreateDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Permission</term>
    ///      <description>See <see cref="UserGroupAdminRole.Permission" />. Editable; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="UserGroupAdminRole.GroupID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>RoleID</term>
    ///      <description>See <see cref="UserGroupAdminRole.RoleID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>RoleRef</term>
    ///      <description>See <see cref="UserGroupAdminRole.RoleRef" />, which is a member of the data set "Roles" for <see cref="Role" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupRef</term>
    ///      <description>See <see cref="UserGroupAdminRole.UserGroupRef" />, which is a member of the data set "UserGroups" for <see cref="UserGroup" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class UserGroupAdminRole : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.GroupID + ":" + this.RoleID.ToString();
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserGroupAdminRoleService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "GroupID = " + GroupID + "\r\n";
                str += "RoleID = " + RoleID + "\r\n";
                if (IsPermissionModified)
                    str += "Modified [Permission] = " + Permission + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUserGroupRef();
            LoadRoleRef();
            return String.Format(@"{0} allows {1} to {2}", (UserGroupRef != null ? UserGroupRef.DistinctString : ""), (RoleRef != null ? RoleRef.DistinctString : ""), Permission);
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserGroupAdminRole()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public UserGroupAdminRole(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserGroupAdminRole));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as UserGroupAdminRole;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserGroupAdminRole));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string GroupID
        { 
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    _GroupID = value;
                }
            }
        }
        private string _GroupID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public int RoleID
        { 
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    _RoleID = value;
                }
            }
        }
        private int _RoleID = default(int);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreateDate
        { 
            get
            {
                return _CreateDate;
            }
            set
            {
                if (_CreateDate != value)
                {
                    _CreateDate = value;
                }
            }
        }
        private DateTime _CreateDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public int Permission
        { 
            get
            {
                return _Permission;
            }
            set
            {
                if (_Permission != value)
                {
                    _Permission = value;
                    if (StartAutoUpdating)
                        IsPermissionModified = true;
                }
            }
        }
        private int _Permission = default(int);

        /// <summary>
        /// Wether or not the value of <see cref="Permission" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Permission" /> only if this is set to true no matter what
        /// the actual value of <see cref="Permission" /> is.
        /// </summary>
        [DataMember]
        public bool IsPermissionModified
        { 
            get
            {
                return _isPermissionModified;
            }
            set
            {
                _isPermissionModified = value;
            }
        }
        private bool _isPermissionModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Roles" for <see cref="Role" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserGroupAdminRole.RoleID" /> }.
        /// </summary>
        [DataMember]
        public Role RoleRef
        {
            get 
            {
                if (_RoleRef == null && AutoLoadRoleRef != null)
                    _RoleRef = AutoLoadRoleRef();
                return _RoleRef; 
            }
            set 
            { 
                _RoleRef = value; 
            }
        }
        private Role _RoleRef = null;

        /// <summary>
        /// <see cref="UserGroupAdminRole.RoleRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserGroupAdminRole.DelLoadRoleRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadRoleRef()
        {
            if (_RoleRef != null)
                return;
            if (DelLoadRoleRef != null)
                _RoleRef = DelLoadRoleRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserGroupAdminRole.RoleRef" />.
        /// </summary>
        public Func<Role> DelLoadRoleRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserGroupAdminRole.RoleRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Role> AutoLoadRoleRef = null;

        /// <summary>
        /// Entity in data set "UserGroups" for <see cref="UserGroup" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserGroupAdminRole.GroupID" /> }.
        /// </summary>
        [DataMember]
        public UserGroup UserGroupRef
        {
            get 
            {
                if (_UserGroupRef == null && AutoLoadUserGroupRef != null)
                    _UserGroupRef = AutoLoadUserGroupRef();
                return _UserGroupRef; 
            }
            set 
            { 
                _UserGroupRef = value; 
            }
        }
        private UserGroup _UserGroupRef = null;

        /// <summary>
        /// <see cref="UserGroupAdminRole.UserGroupRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserGroupAdminRole.DelLoadUserGroupRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserGroupRef()
        {
            if (_UserGroupRef != null)
                return;
            if (DelLoadUserGroupRef != null)
                _UserGroupRef = DelLoadUserGroupRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserGroupAdminRole.UserGroupRef" />.
        /// </summary>
        public Func<UserGroup> DelLoadUserGroupRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserGroupAdminRole.UserGroupRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroup> AutoLoadUserGroupRef = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserGroupAdminRole other)
        {
            if (other == null)
                return false;
            if (GroupID != other.GroupID)
                return false;
            if (RoleID != other.RoleID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserGroupAdminRole other)
        {
            if (other == null)
                return false;
            else
                return GroupID == other.GroupID &&  RoleID == other.RoleID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserGroupAdminRole from, UserGroupAdminRole to)
        {
            if (to.IsPersisted)
            {
                if (from.IsPermissionModified && !to.IsPermissionModified)
                {
                    to.Permission = from.Permission;
                    to.IsPermissionModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.GroupID = from.GroupID;
                to.RoleID = from.RoleID;
                to.CreateDate = from.CreateDate;
                to.Permission = from.Permission;
                to.IsPermissionModified = from.IsPermissionModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserGroupAdminRole newdata)
        {
            int cnt = 0;
            if (Permission != newdata.Permission)
            {
                Permission = newdata.Permission;
                IsPermissionModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (!IsEntityChanged)
                IsEntityChanged = IsPermissionModified;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserGroupAdminRole ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            UserGroupAdminRole e = new UserGroupAdminRole();
            e.StartAutoUpdating = false;
            e.GroupID = GroupID;
            e.RoleID = RoleID;
            e.CreateDate = CreateDate;
            e.Permission = Permission;
            if (preserveState)
                e.IsPermissionModified = IsPermissionModified;
            else
                e.IsPermissionModified = false;
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserGroupAdminRole]] =====----
  GroupID = '" + GroupID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  RoleID = " + RoleID + @"");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreateDate = " + CreateDate + @"
  Permission = " + Permission + @"");
            if (IsPermissionModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserGroupAdminRole" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class UserGroupAdminRoleUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserGroupAdminRole UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserGroupAdminRole ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
