//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A enumeration of data entity sets.
    /// </summary>
    [DataContract]
    [Serializable]
    public enum EntitySetType
    {
        /// <summary>
        /// Default value.
        /// </summary>
        [EnumMember]
        Unknown,
        /// <summary>
        /// It represents the overall data source.
        /// </summary>
        [EnumMember]
        DatabaseLevel,
        /// <summary>
        /// It represents data set <c>Announcements</c> (see <see cref="Announcement" />).
        /// </summary>
        [EnumMember]
        Announcement,
        /// <summary>
        /// It represents data set <c>Applications</c> (see <see cref="Application_" />).
        /// </summary>
        [EnumMember]
        Application_,
        /// <summary>
        /// It represents data set <c>Communications</c> (see <see cref="Communication" />).
        /// </summary>
        [EnumMember]
        Communication,
        /// <summary>
        /// It represents data set <c>CommunicationTypes</c> (see <see cref="CommunicationType" />).
        /// </summary>
        [EnumMember]
        CommunicationType,
        /// <summary>
        /// It represents data set <c>EventCalendar</c> (see <see cref="EventCalendar" />).
        /// </summary>
        [EnumMember]
        EventCalendar,
        /// <summary>
        /// It represents data set <c>EventCalendarShareCircles</c> (see <see cref="EventCalendarShareCircle" />).
        /// </summary>
        [EnumMember]
        EventCalendarShareCircle,
        /// <summary>
        /// It represents data set <c>EventTypes</c> (see <see cref="EventType" />).
        /// </summary>
        [EnumMember]
        EventType,
        /// <summary>
        /// It represents data set <c>MemberCallbacks</c> (see <see cref="MemberCallback" />).
        /// </summary>
        [EnumMember]
        MemberCallback,
        /// <summary>
        /// It represents data set <c>MemberNotifications</c> (see <see cref="MemberNotification" />).
        /// </summary>
        [EnumMember]
        MemberNotification,
        /// <summary>
        /// It represents data set <c>MemberNotificationTypes</c> (see <see cref="MemberNotificationType" />).
        /// </summary>
        [EnumMember]
        MemberNotificationType,
        /// <summary>
        /// It represents data set <c>NotificationTaskSchedules</c> (see <see cref="NotificationTaskSchedule" />).
        /// </summary>
        [EnumMember]
        NotificationTaskSchedule,
        /// <summary>
        /// It represents data set <c>Roles</c> (see <see cref="Role" />).
        /// </summary>
        [EnumMember]
        Role,
        /// <summary>
        /// It represents data set <c>ShortMessageAttachments</c> (see <see cref="ShortMessageAttachment" />).
        /// </summary>
        [EnumMember]
        ShortMessageAttachment,
        /// <summary>
        /// It represents data set <c>ShortMessageAudiences</c> (see <see cref="ShortMessageAudience" />).
        /// </summary>
        [EnumMember]
        ShortMessageAudience,
        /// <summary>
        /// It represents data set <c>ShortMessageDataBlocks</c> (see <see cref="ShortMessageDataBlock" />).
        /// </summary>
        [EnumMember]
        ShortMessageDataBlock,
        /// <summary>
        /// It represents data set <c>ShortMessages</c> (see <see cref="ShortMessage" />).
        /// </summary>
        [EnumMember]
        ShortMessage,
        /// <summary>
        /// It represents data set <c>ShortMessageTypes</c> (see <see cref="ShortMessageType" />).
        /// </summary>
        [EnumMember]
        ShortMessageType,
        /// <summary>
        /// It represents data set <c>SignalRHostStates</c> (see <see cref="SignalRHostState" />).
        /// </summary>
        [EnumMember]
        SignalRHostState,
        /// <summary>
        /// It represents data set <c>SignalRMessages</c> (see <see cref="SignalRMessage" />).
        /// </summary>
        [EnumMember]
        SignalRMessage,
        /// <summary>
        /// It represents data set <c>UserAppMembers</c> (see <see cref="UserAppMember" />).
        /// </summary>
        [EnumMember]
        UserAppMember,
        /// <summary>
        /// It represents data set <c>UserAssociations</c> (see <see cref="UserAssociation" />).
        /// </summary>
        [EnumMember]
        UserAssociation,
        /// <summary>
        /// It represents data set <c>UserAssociationTypes</c> (see <see cref="UserAssociationType" />).
        /// </summary>
        [EnumMember]
        UserAssociationType,
        /// <summary>
        /// It represents data set <c>UserAssocInvitations</c> (see <see cref="UserAssocInvitation" />).
        /// </summary>
        [EnumMember]
        UserAssocInvitation,
        /// <summary>
        /// It represents data set <c>UserDetails</c> (see <see cref="UserDetail" />).
        /// </summary>
        [EnumMember]
        UserDetail,
        /// <summary>
        /// It represents data set <c>UserGroupAdminRoles</c> (see <see cref="UserGroupAdminRole" />).
        /// </summary>
        [EnumMember]
        UserGroupAdminRole,
        /// <summary>
        /// It represents data set <c>UserGroupMembers</c> (see <see cref="UserGroupMember" />).
        /// </summary>
        [EnumMember]
        UserGroupMember,
        /// <summary>
        /// It represents data set <c>UserGroups</c> (see <see cref="UserGroup" />).
        /// </summary>
        [EnumMember]
        UserGroup,
        /// <summary>
        /// It represents data set <c>UserGroupTypes</c> (see <see cref="UserGroupType" />).
        /// </summary>
        [EnumMember]
        UserGroupType,
        /// <summary>
        /// It represents data set <c>UserProfiles</c> (see <see cref="UserProfile" />).
        /// </summary>
        [EnumMember]
        UserProfile,
        /// <summary>
        /// It represents data set <c>UserProfileTypes</c> (see <see cref="UserProfileType" />).
        /// </summary>
        [EnumMember]
        UserProfileType,
        /// <summary>
        /// It represents data set <c>Users</c> (see <see cref="User" />).
        /// </summary>
        [EnumMember]
        User,
        /// <summary>
        /// It represents data set <c>UsersInRoles</c> (see <see cref="UsersInRole" />).
        /// </summary>
        [EnumMember]
        UsersInRole,
        /// <summary>
        /// It represents data set <c>UsersRoleHistories</c> (see <see cref="UsersRoleHistory" />).
        /// </summary>
        [EnumMember]
        UsersRoleHistory
    }

    /// <summary>
    /// Entity operation status.
    /// </summary>
    [Flags]
    [DataContract]
    [Serializable]
    public enum EntityOpStatus
    {
        [EnumMember]
        Unknown = 0,
        [EnumMember]
        Added = 1,
        [EnumMember]
        Updated = 1 << 1,
        [EnumMember]
        OverwritingDenied  = 1 << 2,
        [EnumMember]
        Duplication  = 1 << 3,
        [EnumMember]
        SyncConflict = 1 << 4,
        [EnumMember]
        InvalideForeignKey = 1 << 5,
        [EnumMember]
        NewPrimaryKey = 1 << 6,
        [EnumMember]
        NewForeignKey = 1 << 7,
        [EnumMember]
        Deleted = 1 << 8,
        [EnumMember]
        DeleteNoExisting = 1 << 9,
        [EnumMember]
        NoOperation = 1 << 10,
        [EnumMember]
        ParentsOpFailed = 1 << 11,
        [EnumMember]
        ChildrenOpFailed = 1 << 12,
        [EnumMember]
        AddNewDenied = 1 << 13,
        [EnumMember]
        PostMapRequired = 1 << 14,
        [EnumMember]
        GeneralInsertFailure = 1 << 15
    }

    /// <summary>
    /// Interface for entity update results.
    /// </summary>
    public interface IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        int OpStatus { get; set; }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        string EntityInfo { get; }

    }

    /// <summary>
    /// Correlated sets info.
    /// </summary>
    [DataContract]
    [Serializable]
    public class EntitySetRelation
    {
    /// <summary>
    /// A set in question.
    /// </summary>
        [DataMember]
        public EntitySetType SetType
        {
            get;
            set;
        }

    /// <summary>
    /// A list of related sets.
    /// </summary>
        [DataMember]
        public EntitySetType[] RelatedSets
        {
            get;
            set;
        }

    }

    /// <summary>
    /// A class representing the absense or the value of a foreign key.
    /// </summary>
    /// <typeparam name="T">
    ///  The type of the foreign key.
    /// </typeparam>
    [DataContract]
    [Serializable]
    public class ForeignKeyData<T>
    {
        /// <summary>
        /// The value of the foreign key.
        /// </summary>
        [DataMember]
        public T KeyValue
        {
            get;
            set;
        }

        /// <summary>
        /// Internal use only.
        /// </summary>
        public string CacheKey
        {
            get { return KeyValue == null ? "null" : KeyValue.ToString(); }
        }
    }

    /// <summary>
    /// An pointer to a non-empty constraint.
    /// </summary>
    [DataContract]
    [Serializable]
    public class ConstraintsPtr
    {
        /// <summary>
        /// The index.
        /// </summary>
        [DataMember]
        public int FkeysIndex
        {
            get { return _fkeysIndex; }
            set { _fkeysIndex = value; }
        }
        private int _fkeysIndex = -1;

        /// <summary>
        /// The corresponding item count.
        /// </summary>
        [DataMember]
        public int ItemCount
        {
            get;
            set;
        }

    }

    /// <summary>
    /// A class representing a foreign key for a root entity set. <seealso cref="RootEntityInfo" />.
    /// </summary>
    /// <remarks>
    /// A root entity set is the ones having no dependency on other entity set excluding itself. It can have foreign key constraint since
    /// the system could be configured to only cover a part of an entire relational data source and some entity sets becomes local root ones.
    /// </remarks>
    [DataContract]
    [Serializable]
    public class RootFKInfo
    {
        /// <summary>
        /// The type of the foreign key.
        /// </summary>
        [DataMember]
        public string PropType
        {
            get;
            set;
        }

        /// <summary>
        /// The name of the foreign key property.
        /// </summary>
        [DataMember]
        public string PropName
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not the foreign key is nullable.
        /// </summary>
        [DataMember]
        public bool PropNullable
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A class representing a root entity set. 
    /// </summary>
    /// <remarks>
    /// A root entity set is the ones having no dependency on other entity set excluding itself. It can have foreign key constraint since
    /// the system could be configured to only cover a part of an entire relational data source and some entity sets becomes local root ones.
    /// </remarks>
    [DataContract]
    [Serializable]
    public class RootEntityInfo
    {
        /// <summary>
        /// The name of the entity.
        /// </summary>
        [DataMember]
        public string EntityName
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not it is not a local root entity.
        /// </summary>
        /// <remarks>
        /// A root entity set is the ones having no dependency on other entity set excluding itself. Since
        /// the system could be configured to only cover a part of an entire relational data source and some entity sets becomes local root ones. They are not
        /// true roots.
        /// </remarks>
        [DataMember]
        public bool TrueRoot
        {
            get;
            set;
        }

        /// <summary>
        /// A list of foreign keys for the entity set, if any.
        /// </summary>
        [DataMember]
        public RootFKInfo[] Fkeys
        {
            get;
            set;
        }
    }

    /// <summary>
    /// A class representing a relational data source.
    /// </summary>
    [DataContract]
    [Serializable]
    public class DBInformation
    {
        /// <summary>
        /// Whether or not the data source can be actively persisted by clients. 
        /// </summary>
        [DataMember]
        public bool IsDBUserPersistable
        {
            get;
            set;
        }

        /// <summary>
        /// Whether or not the data source can be  actively loaded by clients. 
        /// </summary>
        [DataMember]
        public bool IsDBUserLoaded
        {
            get;
            set;
        }

        /// <summary>
        /// A set of abstracted root entity sets for the data source. <seealso cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public RootEntityInfo[] RootEntities
        {
            get
            {
                if (_rootEntities == null)
                {
                    List<RootEntityInfo> l = new List<RootEntityInfo>();
                    List<RootFKInfo> lk = new List<RootFKInfo>();
                    RootEntityInfo item;
                    item = new RootEntityInfo{ EntityName = "Application_", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "CommunicationType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "EventType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "MemberNotificationType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "ShortMessageType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "UserAssociationType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "UserGroupType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "UserProfileType", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    item = new RootEntityInfo{ EntityName = "User", TrueRoot = true };
                    item.Fkeys = lk.ToArray();
                    lk.Clear();
                    l.Add(item);
                    _rootEntities = l.ToArray();
                }
                return _rootEntities;
            }
        }
        private RootEntityInfo[] _rootEntities = null;

        /// <summary>
        /// Root entity set <see cref="Application_Set" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public Application_Set Application_s
        {
            get
            {
                if (_Application_s == null)
                    _Application_s = new Application_Set();
                return _Application_s;
            }
            set
            {
                _Application_s = value;
            }
        }
        private Application_Set _Application_s = null;

        /// <summary>
        /// Root entity set <see cref="CommunicationTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public CommunicationTypeSet CommunicationTypes
        {
            get
            {
                if (_CommunicationTypes == null)
                    _CommunicationTypes = new CommunicationTypeSet();
                return _CommunicationTypes;
            }
            set
            {
                _CommunicationTypes = value;
            }
        }
        private CommunicationTypeSet _CommunicationTypes = null;

        /// <summary>
        /// Root entity set <see cref="EventTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public EventTypeSet EventTypes
        {
            get
            {
                if (_EventTypes == null)
                    _EventTypes = new EventTypeSet();
                return _EventTypes;
            }
            set
            {
                _EventTypes = value;
            }
        }
        private EventTypeSet _EventTypes = null;

        /// <summary>
        /// Root entity set <see cref="MemberNotificationTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public MemberNotificationTypeSet MemberNotificationTypes
        {
            get
            {
                if (_MemberNotificationTypes == null)
                    _MemberNotificationTypes = new MemberNotificationTypeSet();
                return _MemberNotificationTypes;
            }
            set
            {
                _MemberNotificationTypes = value;
            }
        }
        private MemberNotificationTypeSet _MemberNotificationTypes = null;

        /// <summary>
        /// Root entity set <see cref="ShortMessageTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public ShortMessageTypeSet ShortMessageTypes
        {
            get
            {
                if (_ShortMessageTypes == null)
                    _ShortMessageTypes = new ShortMessageTypeSet();
                return _ShortMessageTypes;
            }
            set
            {
                _ShortMessageTypes = value;
            }
        }
        private ShortMessageTypeSet _ShortMessageTypes = null;

        /// <summary>
        /// Root entity set <see cref="UserAssociationTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public UserAssociationTypeSet UserAssociationTypes
        {
            get
            {
                if (_UserAssociationTypes == null)
                    _UserAssociationTypes = new UserAssociationTypeSet();
                return _UserAssociationTypes;
            }
            set
            {
                _UserAssociationTypes = value;
            }
        }
        private UserAssociationTypeSet _UserAssociationTypes = null;

        /// <summary>
        /// Root entity set <see cref="UserGroupTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public UserGroupTypeSet UserGroupTypes
        {
            get
            {
                if (_UserGroupTypes == null)
                    _UserGroupTypes = new UserGroupTypeSet();
                return _UserGroupTypes;
            }
            set
            {
                _UserGroupTypes = value;
            }
        }
        private UserGroupTypeSet _UserGroupTypes = null;

        /// <summary>
        /// Root entity set <see cref="UserProfileTypeSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public UserProfileTypeSet UserProfileTypes
        {
            get
            {
                if (_UserProfileTypes == null)
                    _UserProfileTypes = new UserProfileTypeSet();
                return _UserProfileTypes;
            }
            set
            {
                _UserProfileTypes = value;
            }
        }
        private UserProfileTypeSet _UserProfileTypes = null;

        /// <summary>
        /// Root entity set <see cref="UserSet" />. See also <see cref="RootEntityInfo" />.
        /// </summary>
        [DataMember]
        public UserSet Users
        {
            get
            {
                if (_Users == null)
                    _Users = new UserSet();
                return _Users;
            }
            set
            {
                _Users = value;
            }
        }
        private UserSet _Users = null;

    }
}