//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "UserAppMembers" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserAppMember.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserAppMember.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserAppMember.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserAppMember.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Email</term>
    ///      <description>See <see cref="UserAppMember.Email" />. Editable; not null; max-length = 128 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>AcceptChatInvitation</term>
    ///      <description>See <see cref="UserAppMember.AcceptChatInvitation" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>AcceptLanguages</term>
    ///      <description>See <see cref="UserAppMember.AcceptLanguages" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>Comment</term>
    ///      <description>See <see cref="UserAppMember.Comment" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>IconImg</term>
    ///      <description>See <see cref="UserAppMember.IconImg" />. Editable; nullable; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>IconLastModified</term>
    ///      <description>See <see cref="UserAppMember.IconLastModified" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>IconMime</term>
    ///      <description>See <see cref="UserAppMember.IconMime" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastActivityDate</term>
    ///      <description>See <see cref="UserAppMember.LastActivityDate" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastStatusChange</term>
    ///      <description>See <see cref="UserAppMember.LastStatusChange" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>MemberStatus</term>
    ///      <description>See <see cref="UserAppMember.MemberStatus" />. Editable; nullable; max-length = 50 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>SearchListing</term>
    ///      <description>See <see cref="UserAppMember.SearchListing" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="UserAppMember.ApplicationID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserID</term>
    ///      <description>See <see cref="UserAppMember.UserID" />. Primary key; intrinsic id; fixed; not null; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="UserAppMember.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserRef</term>
    ///      <description>See <see cref="UserAppMember.UserRef" />, which is a member of the data set "Users" for <see cref="User" />.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>The following entity sets depend on this entity</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>MemberCallbacks</term>
    ///      <description>See <see cref="UserAppMember.MemberCallbacks" />, which is a sub-set of the data set "MemberCallbacks" for <see cref="MemberCallback" />.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class UserAppMember : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ApplicationID + ":" + this.UserID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IUserAppMemberService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ApplicationID = " + ApplicationID + "\r\n";
                str += "UserID = " + UserID + "\r\n";
                if (IsEmailModified)
                    str += "Modified [Email] = " + Email + "\r\n";
                if (IsAcceptChatInvitationModified)
                    str += "Modified [AcceptChatInvitation] = " + AcceptChatInvitation + "\r\n";
                if (IsAcceptLanguagesModified)
                    str += "Modified [AcceptLanguages] = " + AcceptLanguages + "\r\n";
                if (IsCommentModified)
                    str += "Modified [Comment] = " + Comment + "\r\n";
                if (IsIconImgModified)
                    str += "Modified [IconImg] = " + IconImg + "\r\n";
                if (IsIconLastModifiedModified)
                    str += "Modified [IconLastModified] = " + IconLastModified + "\r\n";
                if (IsIconMimeModified)
                    str += "Modified [IconMime] = " + IconMime + "\r\n";
                if (IsLastActivityDateModified)
                    str += "Modified [LastActivityDate] = " + LastActivityDate + "\r\n";
                if (IsLastStatusChangeModified)
                    str += "Modified [LastStatusChange] = " + LastStatusChange + "\r\n";
                if (IsMemberStatusModified)
                    str += "Modified [MemberStatus] = " + MemberStatus + "\r\n";
                if (IsSearchListingModified)
                    str += "Modified [SearchListing] = " + SearchListing + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            LoadUserRef();
            LoadApplication_Ref();
            return String.Format(@"{0} in {1}", (UserRef != null ? UserRef.DistinctString : ""), (Application_Ref != null ? Application_Ref.DistinctString : ""));
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserAppMember()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public UserAppMember(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserAppMember));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as UserAppMember;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(UserAppMember));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null; foreign key.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string UserID
        { 
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    _UserID = value;
                }
            }
        }
        private string _UserID = default(string);

        /// <summary>
        /// Meta-info: editable; not null; max-length = 128 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(128)]
        [DataMember(IsRequired = true)]
        public string Email
        { 
            get
            {
                return _Email;
            }
            set
            {
                if (_Email != value)
                {
                    _Email = value;
                    if (StartAutoUpdating)
                        IsEmailModified = true;
                }
            }
        }
        private string _Email = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Email" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Email" /> only if this is set to true no matter what
        /// the actual value of <see cref="Email" /> is.
        /// </summary>
        [DataMember]
        public bool IsEmailModified
        { 
            get
            {
                return _isEmailModified;
            }
            set
            {
                _isEmailModified = value;
            }
        }
        private bool _isEmailModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> AcceptChatInvitation
        { 
            get
            {
                return _AcceptChatInvitation;
            }
            set
            {
                if (_AcceptChatInvitation != value)
                {
                    _AcceptChatInvitation = value;
                    if (StartAutoUpdating)
                        IsAcceptChatInvitationModified = true;
                }
            }
        }
        private System.Nullable<bool> _AcceptChatInvitation = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="AcceptChatInvitation" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="AcceptChatInvitation" /> only if this is set to true no matter what
        /// the actual value of <see cref="AcceptChatInvitation" /> is.
        /// </summary>
        [DataMember]
        public bool IsAcceptChatInvitationModified
        { 
            get
            {
                return _isAcceptChatInvitationModified;
            }
            set
            {
                _isAcceptChatInvitationModified = value;
            }
        }
        private bool _isAcceptChatInvitationModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string AcceptLanguages
        { 
            get
            {
                return _AcceptLanguages;
            }
            set
            {
                if (_AcceptLanguages != value)
                {
                    _AcceptLanguages = value;
                    if (StartAutoUpdating)
                        IsAcceptLanguagesModified = true;
                }
            }
        }
        private string _AcceptLanguages = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="AcceptLanguages" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="AcceptLanguages" /> only if this is set to true no matter what
        /// the actual value of <see cref="AcceptLanguages" /> is.
        /// </summary>
        [DataMember]
        public bool IsAcceptLanguagesModified
        { 
            get
            {
                return _isAcceptLanguagesModified;
            }
            set
            {
                _isAcceptLanguagesModified = value;
            }
        }
        private bool _isAcceptLanguagesModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public string Comment
        { 
            get
            {
                return _Comment;
            }
            set
            {
                if (_Comment != value)
                {
                    _Comment = value;
                    if (StartAutoUpdating)
                        IsCommentModified = true;
                    if (StartAutoUpdating)
                        IsCommentLoaded = value != null;
                }
            }
        }
        private string _Comment = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Comment" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Comment" /> only if this is set to true no matter what
        /// the actual value of <see cref="Comment" /> is.
        /// </summary>
        [DataMember]
        public bool IsCommentModified
        { 
            get
            {
                return _isCommentModified;
            }
            set
            {
                _isCommentModified = value;
            }
        }
        private bool _isCommentModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "Comment" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsCommentLoaded
        { 
            get
            {
                return _isCommentLoaded;
            }
            set
            {
                _isCommentLoaded = value;
            }
        }
        private bool _isCommentLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable; load delayed.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public byte[] IconImg
        { 
            get
            {
                return _IconImg;
            }
            set
            {
                if (_IconImg != value)
                {
                    _IconImg = value;
                    if (StartAutoUpdating)
                        IsIconImgModified = true;
                    if (StartAutoUpdating)
                        IsIconImgLoaded = value != null;
                }
            }
        }
        private byte[] _IconImg = default(byte[]);

        /// <summary>
        /// Wether or not the value of <see cref="IconImg" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IconImg" /> only if this is set to true no matter what
        /// the actual value of <see cref="IconImg" /> is.
        /// </summary>
        [DataMember]
        public bool IsIconImgModified
        { 
            get
            {
                return _isIconImgModified;
            }
            set
            {
                _isIconImgModified = value;
            }
        }
        private bool _isIconImgModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "IconImg" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsIconImgLoaded
        { 
            get
            {
                return _isIconImgLoaded;
            }
            set
            {
                _isIconImgLoaded = value;
            }
        }
        private bool _isIconImgLoaded = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> IconLastModified
        { 
            get
            {
                return _IconLastModified;
            }
            set
            {
                if (_IconLastModified != value)
                {
                    _IconLastModified = value;
                    if (StartAutoUpdating)
                        IsIconLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _IconLastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="IconLastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IconLastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="IconLastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsIconLastModifiedModified
        { 
            get
            {
                return _isIconLastModifiedModified;
            }
            set
            {
                _isIconLastModifiedModified = value;
            }
        }
        private bool _isIconLastModifiedModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string IconMime
        { 
            get
            {
                return _IconMime;
            }
            set
            {
                if (_IconMime != value)
                {
                    _IconMime = value;
                    if (StartAutoUpdating)
                        IsIconMimeModified = true;
                }
            }
        }
        private string _IconMime = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="IconMime" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="IconMime" /> only if this is set to true no matter what
        /// the actual value of <see cref="IconMime" /> is.
        /// </summary>
        [DataMember]
        public bool IsIconMimeModified
        { 
            get
            {
                return _isIconMimeModified;
            }
            set
            {
                _isIconMimeModified = value;
            }
        }
        private bool _isIconMimeModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastActivityDate
        { 
            get
            {
                return _LastActivityDate;
            }
            set
            {
                if (_LastActivityDate != value)
                {
                    _LastActivityDate = value;
                    if (StartAutoUpdating)
                        IsLastActivityDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastActivityDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastActivityDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastActivityDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastActivityDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastActivityDateModified
        { 
            get
            {
                return _isLastActivityDateModified;
            }
            set
            {
                _isLastActivityDateModified = value;
            }
        }
        private bool _isLastActivityDateModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastStatusChange
        { 
            get
            {
                return _LastStatusChange;
            }
            set
            {
                if (_LastStatusChange != value)
                {
                    _LastStatusChange = value;
                    if (StartAutoUpdating)
                        IsLastStatusChangeModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastStatusChange = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastStatusChange" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastStatusChange" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastStatusChange" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastStatusChangeModified
        { 
            get
            {
                return _isLastStatusChangeModified;
            }
            set
            {
                _isLastStatusChangeModified = value;
            }
        }
        private bool _isLastStatusChangeModified = false;

        /// <summary>
        /// Meta-info: editable; nullable; max-length = 50 characters.
        /// </summary>
        [Editable(true)]
        [StringLength(50)]
        [DataMember(IsRequired = false)]
        public string MemberStatus
        { 
            get
            {
                return _MemberStatus;
            }
            set
            {
                if (_MemberStatus != value)
                {
                    _MemberStatus = value;
                    if (StartAutoUpdating)
                        IsMemberStatusModified = true;
                }
            }
        }
        private string _MemberStatus = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="MemberStatus" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="MemberStatus" /> only if this is set to true no matter what
        /// the actual value of <see cref="MemberStatus" /> is.
        /// </summary>
        [DataMember]
        public bool IsMemberStatusModified
        { 
            get
            {
                return _isMemberStatusModified;
            }
            set
            {
                _isMemberStatusModified = value;
            }
        }
        private bool _isMemberStatusModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<bool> SearchListing
        { 
            get
            {
                return _SearchListing;
            }
            set
            {
                if (_SearchListing != value)
                {
                    _SearchListing = value;
                    if (StartAutoUpdating)
                        IsSearchListingModified = true;
                }
            }
        }
        private System.Nullable<bool> _SearchListing = default(System.Nullable<bool>);

        /// <summary>
        /// Wether or not the value of <see cref="SearchListing" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="SearchListing" /> only if this is set to true no matter what
        /// the actual value of <see cref="SearchListing" /> is.
        /// </summary>
        [DataMember]
        public bool IsSearchListingModified
        { 
            get
            {
                return _isSearchListingModified;
            }
            set
            {
                _isSearchListingModified = value;
            }
        }
        private bool _isSearchListingModified = false;

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAppMember.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="UserAppMember.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAppMember.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (_Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAppMember.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="UserAppMember.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="UserAppMember.UserID" /> }.
        /// </summary>
        [DataMember]
        public User UserRef
        {
            get 
            {
                if (_UserRef == null && AutoLoadUserRef != null)
                    _UserRef = AutoLoadUserRef();
                return _UserRef; 
            }
            set 
            { 
                _UserRef = value; 
            }
        }
        private User _UserRef = null;

        /// <summary>
        /// <see cref="UserAppMember.UserRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="UserAppMember.DelLoadUserRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserRef()
        {
            if (_UserRef != null)
                return;
            if (DelLoadUserRef != null)
                _UserRef = DelLoadUserRef();
        }

        /// <summary>
        /// A delegate to load <see cref="UserAppMember.UserRef" />.
        /// </summary>
        public Func<User> DelLoadUserRef = null;

        /// <summary>
        /// A delegate to load <see cref="UserAppMember.UserRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUserRef = null;

#endregion

#region Entities that depend on the current one.

        /// <summary>
        /// Entitity set <see cref="MemberCallbackSet" /> for data set "MemberCallbacks" of <see cref="MemberCallback" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="MemberCallbackSet" /> set is { <see cref="MemberCallback.ApplicationID" />, <see cref="MemberCallback.UserID" /> }.
        /// </summary>
        [DataMember]
		public MemberCallbackSet MemberCallbacks
		{
			get
			{
                if (_MemberCallbacks == null)
                    _MemberCallbacks = new MemberCallbackSet();
				return _MemberCallbacks;
			}
            set
            {
                _MemberCallbacks = value;
            }
		}
		private MemberCallbackSet _MemberCallbacks = null;

        /// <summary>
        /// Entitites enumeration expression for data set "MemberCallbacks" of <see cref="MemberCallback" /> that depend on the current entity.
        /// The corresponding foreign key in <see cref="MemberCallbackSet" /> set is { <see cref="MemberCallback.ApplicationID" />, <see cref="MemberCallback.UserID" /> }.
        /// </summary>
		public IEnumerable<MemberCallback> MemberCallbackEnum
		{
			get;
            set;
		}

        /// <summary>
        /// A list of <see cref="MemberCallback" /> that is to be added or updated to the data source, together with the current entity.
        /// The corresponding foreign key in <see cref="MemberCallbackSet" /> set is { <see cref="MemberCallback.ApplicationID" />, <see cref="MemberCallback.UserID" /> }.
        /// </summary>
        [DataMember]
		public MemberCallback[] ChangedMemberCallbacks
		{
			get;
            set;
		}

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(UserAppMember other)
        {
            if (other == null)
                return false;
            if (ApplicationID != other.ApplicationID)
                return false;
            if (UserID != other.UserID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(UserAppMember other)
        {
            if (other == null)
                return false;
            else
                return ApplicationID == other.ApplicationID &&  UserID == other.UserID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(UserAppMember from, UserAppMember to)
        {
            if (to.IsPersisted)
            {
                if (from.IsEmailModified && !to.IsEmailModified)
                {
                    to.Email = from.Email;
                    to.IsEmailModified = true;
                }
                if (from.IsAcceptChatInvitationModified && !to.IsAcceptChatInvitationModified)
                {
                    to.AcceptChatInvitation = from.AcceptChatInvitation;
                    to.IsAcceptChatInvitationModified = true;
                }
                if (from.IsAcceptLanguagesModified && !to.IsAcceptLanguagesModified)
                {
                    to.AcceptLanguages = from.AcceptLanguages;
                    to.IsAcceptLanguagesModified = true;
                }
                if (from.IsCommentModified && !to.IsCommentModified)
                {
                    to.Comment = from.Comment;
                    to.IsCommentModified = true;
                }
                if (from.IsIconImgModified && !to.IsIconImgModified)
                {
                    to.IconImg = from.IconImg;
                    to.IsIconImgModified = true;
                }
                if (from.IsIconLastModifiedModified && !to.IsIconLastModifiedModified)
                {
                    to.IconLastModified = from.IconLastModified;
                    to.IsIconLastModifiedModified = true;
                }
                if (from.IsIconMimeModified && !to.IsIconMimeModified)
                {
                    to.IconMime = from.IconMime;
                    to.IsIconMimeModified = true;
                }
                if (from.IsLastActivityDateModified && !to.IsLastActivityDateModified)
                {
                    to.LastActivityDate = from.LastActivityDate;
                    to.IsLastActivityDateModified = true;
                }
                if (from.IsLastStatusChangeModified && !to.IsLastStatusChangeModified)
                {
                    to.LastStatusChange = from.LastStatusChange;
                    to.IsLastStatusChangeModified = true;
                }
                if (from.IsMemberStatusModified && !to.IsMemberStatusModified)
                {
                    to.MemberStatus = from.MemberStatus;
                    to.IsMemberStatusModified = true;
                }
                if (from.IsSearchListingModified && !to.IsSearchListingModified)
                {
                    to.SearchListing = from.SearchListing;
                    to.IsSearchListingModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ApplicationID = from.ApplicationID;
                to.UserID = from.UserID;
                to.Email = from.Email;
                to.IsEmailModified = from.IsEmailModified;
                to.AcceptChatInvitation = from.AcceptChatInvitation;
                to.IsAcceptChatInvitationModified = from.IsAcceptChatInvitationModified;
                to.AcceptLanguages = from.AcceptLanguages;
                to.IsAcceptLanguagesModified = from.IsAcceptLanguagesModified;
                to.Comment = from.Comment;
                to.IsCommentModified = from.IsCommentModified;
                to.IconImg = from.IconImg;
                to.IsIconImgModified = from.IsIconImgModified;
                to.IconLastModified = from.IconLastModified;
                to.IsIconLastModifiedModified = from.IsIconLastModifiedModified;
                to.IconMime = from.IconMime;
                to.IsIconMimeModified = from.IsIconMimeModified;
                to.LastActivityDate = from.LastActivityDate;
                to.IsLastActivityDateModified = from.IsLastActivityDateModified;
                to.LastStatusChange = from.LastStatusChange;
                to.IsLastStatusChangeModified = from.IsLastStatusChangeModified;
                to.MemberStatus = from.MemberStatus;
                to.IsMemberStatusModified = from.IsMemberStatusModified;
                to.SearchListing = from.SearchListing;
                to.IsSearchListingModified = from.IsSearchListingModified;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(UserAppMember newdata)
        {
            int cnt = 0;
            if (Email != newdata.Email)
            {
                Email = newdata.Email;
                IsEmailModified = true;
                cnt++;
            }
            if (AcceptChatInvitation != newdata.AcceptChatInvitation)
            {
                AcceptChatInvitation = newdata.AcceptChatInvitation;
                IsAcceptChatInvitationModified = true;
                cnt++;
            }
            if (AcceptLanguages != newdata.AcceptLanguages)
            {
                AcceptLanguages = newdata.AcceptLanguages;
                IsAcceptLanguagesModified = true;
                cnt++;
            }
            if (Comment != newdata.Comment)
            {
                Comment = newdata.Comment;
                IsCommentModified = true;
                cnt++;
            }
            bool bIconImg = IconImg == null && newdata.IconImg != null ||
                                                         IconImg != null && newdata.IconImg == null ||
                                                         IconImg != null && newdata.IconImg != null && IconImg.Length != newdata.IconImg.Length;
            if (!bIconImg && IconImg != null)
            {
                for (int i = 0; i < IconImg.Length; i++)
                {
                    bIconImg = IconImg[i] != newdata.IconImg[i];
                    if (bIconImg)
                        break;
                }
            }
            if (bIconImg)
            {
                IconImg = newdata.IconImg;
                IsIconImgModified = true;
                cnt++;
            }
            if (IconLastModified != newdata.IconLastModified)
            {
                IconLastModified = newdata.IconLastModified;
                IsIconLastModifiedModified = true;
                cnt++;
            }
            if (IconMime != newdata.IconMime)
            {
                IconMime = newdata.IconMime;
                IsIconMimeModified = true;
                cnt++;
            }
            if (LastActivityDate != newdata.LastActivityDate)
            {
                LastActivityDate = newdata.LastActivityDate;
                IsLastActivityDateModified = true;
                cnt++;
            }
            if (LastStatusChange != newdata.LastStatusChange)
            {
                LastStatusChange = newdata.LastStatusChange;
                IsLastStatusChangeModified = true;
                cnt++;
            }
            if (MemberStatus != newdata.MemberStatus)
            {
                MemberStatus = newdata.MemberStatus;
                IsMemberStatusModified = true;
                cnt++;
            }
            if (SearchListing != newdata.SearchListing)
            {
                SearchListing = newdata.SearchListing;
                IsSearchListingModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (Email == null)
                Email = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsEmailModified || IsAcceptChatInvitationModified || IsAcceptLanguagesModified || IsCommentModified || IsIconImgModified || IsIconLastModifiedModified || IsIconMimeModified || IsLastActivityDateModified || IsLastStatusChangeModified || IsMemberStatusModified || IsSearchListingModified;
            if (IsCommentModified && !IsCommentLoaded)
                IsCommentLoaded = true;
            if (IsIconImgModified && !IsIconImgLoaded)
                IsIconImgLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public UserAppMember ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            UserAppMember e = new UserAppMember();
            e.StartAutoUpdating = false;
            e.ApplicationID = ApplicationID;
            e.UserID = UserID;
            e.Email = Email;
            if (preserveState)
                e.IsEmailModified = IsEmailModified;
            else
                e.IsEmailModified = false;
            e.AcceptChatInvitation = AcceptChatInvitation;
            if (preserveState)
                e.IsAcceptChatInvitationModified = IsAcceptChatInvitationModified;
            else
                e.IsAcceptChatInvitationModified = false;
            e.AcceptLanguages = AcceptLanguages;
            if (preserveState)
                e.IsAcceptLanguagesModified = IsAcceptLanguagesModified;
            else
                e.IsAcceptLanguagesModified = false;
            e.IconLastModified = IconLastModified;
            if (preserveState)
                e.IsIconLastModifiedModified = IsIconLastModifiedModified;
            else
                e.IsIconLastModifiedModified = false;
            e.IconMime = IconMime;
            if (preserveState)
                e.IsIconMimeModified = IsIconMimeModified;
            else
                e.IsIconMimeModified = false;
            e.LastActivityDate = LastActivityDate;
            if (preserveState)
                e.IsLastActivityDateModified = IsLastActivityDateModified;
            else
                e.IsLastActivityDateModified = false;
            e.LastStatusChange = LastStatusChange;
            if (preserveState)
                e.IsLastStatusChangeModified = IsLastStatusChangeModified;
            else
                e.IsLastStatusChangeModified = false;
            e.MemberStatus = MemberStatus;
            if (preserveState)
                e.IsMemberStatusModified = IsMemberStatusModified;
            else
                e.IsMemberStatusModified = false;
            e.SearchListing = SearchListing;
            if (preserveState)
                e.IsSearchListingModified = IsSearchListingModified;
            else
                e.IsSearchListingModified = false;
            if (allData)
            {
                if (!checkLoadState || IsCommentLoaded)
                    e.Comment = Comment;
                if (preserveState)
                    e.IsCommentModified = IsCommentModified;
                else
                    e.IsCommentModified = false;
                e.IsCommentLoaded = IsCommentLoaded;
                if (!checkLoadState || IsIconImgLoaded)
                    e.IconImg = IconImg;
                if (preserveState)
                    e.IsIconImgModified = IsIconImgModified;
                else
                    e.IsIconImgModified = false;
                e.IsIconImgLoaded = IsIconImgLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[UserAppMember]] =====----
  ApplicationID = '" + ApplicationID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  UserID = '" + UserID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  Email = '" + Email + @"'");
            if (IsEmailModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  AcceptChatInvitation = " + (AcceptChatInvitation.HasValue ? AcceptChatInvitation.Value.ToString() : "null") + @"");
            if (IsAcceptChatInvitationModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  AcceptLanguages = '" + (AcceptLanguages != null ? AcceptLanguages : "null") + @"'");
            if (IsAcceptLanguagesModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  IconLastModified = " + (IconLastModified.HasValue ? IconLastModified.Value.ToString() : "null") + @"");
            if (IsIconLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  IconMime = '" + (IconMime != null ? IconMime : "null") + @"'");
            if (IsIconMimeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastActivityDate = " + (LastActivityDate.HasValue ? LastActivityDate.Value.ToString() : "null") + @"");
            if (IsLastActivityDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastStatusChange = " + (LastStatusChange.HasValue ? LastStatusChange.Value.ToString() : "null") + @"");
            if (IsLastStatusChangeModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  MemberStatus = '" + (MemberStatus != null ? MemberStatus : "null") + @"'");
            if (IsMemberStatusModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  SearchListing = " + (SearchListing.HasValue ? SearchListing.Value.ToString() : "null") + @"");
            if (IsSearchListingModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="UserAppMember" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class UserAppMemberUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public UserAppMember UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public UserAppMember ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
