//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool from CryptoGateway Software Inc.
//     Tool name: CGW X-Script RDB visual Layer Generator
//
//     Archymeta Information Technologies Co., Ltd.
//
//     Changes to this file, could be overwritten if the code is re-generated.
//     Add (if not yet) a code-manager node to the generator to specify 
//     how existing files are processed.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Configuration;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization.Json;

namespace CryptoGateway.RDB.Data.MembershipPlus
{
    /// <summary>
    /// A entity in "Announcements" data set.
    /// </summary>
    /// <remarks>
    ///  <para>
    ///    Properties of the entity are categorized in the following:
    ///  </para>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Primary keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="Announcement.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Intrinsic Identifiers</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ID</term>
    ///      <description>See <see cref="Announcement.ID" />. Primary key; intrinsic id; fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>None editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>CreatedDate</term>
    ///      <description>See <see cref="Announcement.CreatedDate" />. Fixed; not null.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Editable properties</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Description</term>
    ///      <description>See <see cref="Announcement.Description" />. Editable; not null; load delayed.</description>
    ///    </item>
    ///    <item>
    ///      <term>DispOrder</term>
    ///      <description>See <see cref="Announcement.DispOrder" />. Editable; not null.</description>
    ///    </item>
    ///    <item>
    ///      <term>Title</term>
    ///      <description>See <see cref="Announcement.Title" />. Editable; not null; max-length = 150 characters.</description>
    ///    </item>
    ///    <item>
    ///      <term>ExpireDate</term>
    ///      <description>See <see cref="Announcement.ExpireDate" />. Editable; nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>LastModified</term>
    ///      <description>See <see cref="Announcement.LastModified" />. Editable; nullable.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>Foreign keys</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>ApplicationID</term>
    ///      <description>See <see cref="Announcement.ApplicationID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>CreatedUserID</term>
    ///      <description>See <see cref="Announcement.CreatedUserID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///    <item>
    ///      <term>GroupID</term>
    ///      <description>See <see cref="Announcement.GroupID" />. Fixed; nullable; foreign key.</description>
    ///    </item>
    ///  </list>
    ///  <list type="table">
    ///    <listheader>
    ///       <term>This entity depends on</term><description>Description</description>
    ///    </listheader>
    ///    <item>
    ///      <term>Application_Ref</term>
    ///      <description>See <see cref="Announcement.Application_Ref" />, which is a member of the data set "Applications" for <see cref="Application_" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserGroupRef</term>
    ///      <description>See <see cref="Announcement.UserGroupRef" />, which is a member of the data set "UserGroups" for <see cref="UserGroup" />. Nullable.</description>
    ///    </item>
    ///    <item>
    ///      <term>UserRef</term>
    ///      <description>See <see cref="Announcement.UserRef" />, which is a member of the data set "Users" for <see cref="User" />. Nullable.</description>
    ///    </item>
    ///  </list>
    /// </remarks>
    [DataContract]
    [Serializable]
    public class Announcement : IDbEntity 
    {
        /// <summary>
        /// For internal use only.
        /// </summary>
        public bool IsOperationHandled = false;

        /// <summary>
        /// Used on the server side to return an unique key for caching purposes.
        /// </summary>
        public string CacheKey
        {
            get
            {
                return this.ID;
            }
        }

        /// <summary>
        /// Whether or not the entity was already persisted into to the data source. 
        /// </summary>
        [DataMember]
        public bool IsPersisted
        {
            get { return _isPersisted; }
            set { _isPersisted = value; }
        }
        private bool _isPersisted = false;

        /// <summary>
        /// Used internally.
        /// </summary>
        public bool StartAutoUpdating
        {
            get { return _startAutoUpdating; }
            set { _startAutoUpdating = value; }
        }
        private bool _startAutoUpdating = false;

        /// <summary>
        /// Used to matching entities in input adding or updating entity list and the returned ones, see <see cref="IAnnouncementService.AddOrUpdateEntities" />.
        /// </summary>
        [DataMember]
        public int UpdateIndex
        {
            get { return _updateIndex; }
            set { _updateIndex = value; }
        }
        private int _updateIndex = -1;

        /// <summary>
        /// Its value provides a list of value for intrinsic keys and modified properties.
        /// </summary>
        public string SignatureString 
        { 
            get
            {
                string str = "";
                str += "ID = " + ID + "\r\n";
                if (IsDescriptionModified)
                    str += "Modified [Description] = " + Description + "\r\n";
                if (IsDispOrderModified)
                    str += "Modified [DispOrder] = " + DispOrder + "\r\n";
                if (IsTitleModified)
                    str += "Modified [Title] = " + Title + "\r\n";
                if (IsExpireDateModified)
                    str += "Modified [ExpireDate] = " + ExpireDate + "\r\n";
                if (IsLastModifiedModified)
                    str += "Modified [LastModified] = " + LastModified + "\r\n";;
                return str.Trim();
            }
        }

        /// <summary>
        /// Configured at system generation step, its value provides a short, but characteristic summary of the entity.
        /// </summary>
        [DataMember]
        public string DistinctString
        {
            get 
            {
                if (_distinctString == null)
                    _distinctString = GetDistinctString(true);
                return _distinctString;
            }
            set
            {
                _distinctString = value;
            }
        }
        private string _distinctString = null;

        private string GetDistinctString(bool ShowPathInfo)
        {
            return String.Format(@"{0} ({1})", Title.Trim(), CreatedDate);
        }

        /// <summary>
        /// Whether or not the entity was edited.
        /// </summary>
        [DataMember]
        public bool IsEntityChanged
        {
            get { return _isEntityChanged; }
            set { _isEntityChanged = value; }
        }
        private bool _isEntityChanged = true;

        /// <summary>
        /// Whether or not the entity was to be deleted.
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }
        private bool _isDeleted = false;

#region constructors and serialization

        /// <summary>
        /// Default constructor.
        /// </summary>
        public Announcement()
        {
        }

        /// <summary>
        /// Constructor for serialization (<see cref="ISerializable" />).
        /// </summary>
        public Announcement(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(Announcement));
            var strm = new System.IO.MemoryStream();
            byte[] bf = (byte[])info.GetValue("data", typeof(byte[]));
            strm.Write(bf, 0, bf.Length);
            strm.Position = 0;
            var e = ser.ReadObject(strm) as Announcement;
            IsPersisted = false;
            StartAutoUpdating = false;
            MergeChanges(e, this);
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Implementation of the <see cref="ISerializable" /> interface
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(Announcement));
            var strm = new System.IO.MemoryStream();
            ser.WriteObject(strm, ShallowCopy());
            info.AddValue("data", strm.ToArray(), typeof(byte[]));
        }

#endregion

#region Properties of the current entity

        /// <summary>
        /// Meta-info: primary key; intrinsic id; fixed; not null.
        /// </summary>
        [Key]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public string ID
        { 
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    _ID = value;
                }
            }
        }
        private string _ID = default(string);

        /// <summary>
        /// Meta-info: fixed; not null.
        /// </summary>
        [Required]
        [Editable(false)]
        [DataMember(IsRequired = true)]
        public DateTime CreatedDate
        { 
            get
            {
                return _CreatedDate;
            }
            set
            {
                if (_CreatedDate != value)
                {
                    _CreatedDate = value;
                }
            }
        }
        private DateTime _CreatedDate = default(DateTime);

        /// <summary>
        /// Meta-info: editable; not null; load delayed.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public string Description
        { 
            get
            {
                return _Description;
            }
            set
            {
                if (_Description != value)
                {
                    _Description = value;
                    if (StartAutoUpdating)
                        IsDescriptionModified = true;
                    if (StartAutoUpdating)
                        IsDescriptionLoaded = value != null;
                }
            }
        }
        private string _Description = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Description" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Description" /> only if this is set to true no matter what
        /// the actual value of <see cref="Description" /> is.
        /// </summary>
        [DataMember]
        public bool IsDescriptionModified
        { 
            get
            {
                return _isDescriptionModified;
            }
            set
            {
                _isDescriptionModified = value;
            }
        }
        private bool _isDescriptionModified = false;

        /// <summary>
        /// Wether or not the value of the delay loaded "Description" is Loaded. Clients are responsible for keeping 
        /// track of loading status of delay loading properties.
        /// </summary>
        [DataMember]
        public bool IsDescriptionLoaded
        { 
            get
            {
                return _isDescriptionLoaded;
            }
            set
            {
                _isDescriptionLoaded = value;
            }
        }
        private bool _isDescriptionLoaded = false;

        /// <summary>
        /// Meta-info: editable; not null.
        /// </summary>
        [Required]
        [Editable(true)]
        [DataMember(IsRequired = true)]
        public int DispOrder
        { 
            get
            {
                return _DispOrder;
            }
            set
            {
                if (_DispOrder != value)
                {
                    _DispOrder = value;
                    if (StartAutoUpdating)
                        IsDispOrderModified = true;
                }
            }
        }
        private int _DispOrder = default(int);

        /// <summary>
        /// Wether or not the value of <see cref="DispOrder" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="DispOrder" /> only if this is set to true no matter what
        /// the actual value of <see cref="DispOrder" /> is.
        /// </summary>
        [DataMember]
        public bool IsDispOrderModified
        { 
            get
            {
                return _isDispOrderModified;
            }
            set
            {
                _isDispOrderModified = value;
            }
        }
        private bool _isDispOrderModified = false;

        /// <summary>
        /// Meta-info: editable; not null; max-length = 150 characters.
        /// </summary>
        [Required]
        [Editable(true)]
        [StringLength(150)]
        [DataMember(IsRequired = true)]
        public string Title
        { 
            get
            {
                return _Title;
            }
            set
            {
                if (_Title != value)
                {
                    _Title = value;
                    if (StartAutoUpdating)
                        IsTitleModified = true;
                }
            }
        }
        private string _Title = default(string);

        /// <summary>
        /// Wether or not the value of <see cref="Title" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="Title" /> only if this is set to true no matter what
        /// the actual value of <see cref="Title" /> is.
        /// </summary>
        [DataMember]
        public bool IsTitleModified
        { 
            get
            {
                return _isTitleModified;
            }
            set
            {
                _isTitleModified = value;
            }
        }
        private bool _isTitleModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> ExpireDate
        { 
            get
            {
                return _ExpireDate;
            }
            set
            {
                if (_ExpireDate != value)
                {
                    _ExpireDate = value;
                    if (StartAutoUpdating)
                        IsExpireDateModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _ExpireDate = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="ExpireDate" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="ExpireDate" /> only if this is set to true no matter what
        /// the actual value of <see cref="ExpireDate" /> is.
        /// </summary>
        [DataMember]
        public bool IsExpireDateModified
        { 
            get
            {
                return _isExpireDateModified;
            }
            set
            {
                _isExpireDateModified = value;
            }
        }
        private bool _isExpireDateModified = false;

        /// <summary>
        /// Meta-info: editable; nullable.
        /// </summary>
        [Editable(true)]
        [DataMember(IsRequired = false)]
        public System.Nullable<DateTime> LastModified
        { 
            get
            {
                return _LastModified;
            }
            set
            {
                if (_LastModified != value)
                {
                    _LastModified = value;
                    if (StartAutoUpdating)
                        IsLastModifiedModified = true;
                }
            }
        }
        private System.Nullable<DateTime> _LastModified = default(System.Nullable<DateTime>);

        /// <summary>
        /// Wether or not the value of <see cref="LastModified" /> was changed compared to what it was loaded last time. 
        /// Note: the backend data source updates the changed <see cref="LastModified" /> only if this is set to true no matter what
        /// the actual value of <see cref="LastModified" /> is.
        /// </summary>
        [DataMember]
        public bool IsLastModifiedModified
        { 
            get
            {
                return _isLastModifiedModified;
            }
            set
            {
                _isLastModifiedModified = value;
            }
        }
        private bool _isLastModifiedModified = false;

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string ApplicationID
        { 
            get
            {
                return _ApplicationID;
            }
            set
            {
                if (_ApplicationID != value)
                {
                    _ApplicationID = value;
                }
            }
        }
        private string _ApplicationID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string CreatedUserID
        { 
            get
            {
                return _CreatedUserID;
            }
            set
            {
                if (_CreatedUserID != value)
                {
                    _CreatedUserID = value;
                }
            }
        }
        private string _CreatedUserID = default(string);

        /// <summary>
        /// Meta-info: fixed; nullable; foreign key.
        /// </summary>
        [Editable(false)]
        [DataMember(IsRequired = false)]
        public string GroupID
        { 
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    _GroupID = value;
                }
            }
        }
        private string _GroupID = default(string);

#endregion

#region Entities that the current one depends upon.

        /// <summary>
        /// Entity in data set "Applications" for <see cref="Application_" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="Announcement.ApplicationID" /> }.
        /// </summary>
        [DataMember]
        public Application_ Application_Ref
        {
            get 
            {
                if (ApplicationID == null)
                    return null;
                else if (_Application_Ref == null && AutoLoadApplication_Ref != null)
                    _Application_Ref = AutoLoadApplication_Ref();
                return _Application_Ref; 
            }
            set 
            { 
                _Application_Ref = value; 
            }
        }
        private Application_ _Application_Ref = null;

        /// <summary>
        /// <see cref="Announcement.Application_Ref" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="Announcement.DelLoadApplication_Ref" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadApplication_Ref()
        {
            if (ApplicationID == null || _Application_Ref != null)
                return;
            if (DelLoadApplication_Ref != null)
                _Application_Ref = DelLoadApplication_Ref();
        }

        /// <summary>
        /// A delegate to load <see cref="Announcement.Application_Ref" />.
        /// </summary>
        public Func<Application_> DelLoadApplication_Ref = null;

        /// <summary>
        /// A delegate to load <see cref="Announcement.Application_Ref" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<Application_> AutoLoadApplication_Ref = null;

        /// <summary>
        /// Entity in data set "UserGroups" for <see cref="UserGroup" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="Announcement.GroupID" /> }.
        /// </summary>
        [DataMember]
        public UserGroup UserGroupRef
        {
            get 
            {
                if (GroupID == null)
                    return null;
                else if (_UserGroupRef == null && AutoLoadUserGroupRef != null)
                    _UserGroupRef = AutoLoadUserGroupRef();
                return _UserGroupRef; 
            }
            set 
            { 
                _UserGroupRef = value; 
            }
        }
        private UserGroup _UserGroupRef = null;

        /// <summary>
        /// <see cref="Announcement.UserGroupRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="Announcement.DelLoadUserGroupRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserGroupRef()
        {
            if (GroupID == null || _UserGroupRef != null)
                return;
            if (DelLoadUserGroupRef != null)
                _UserGroupRef = DelLoadUserGroupRef();
        }

        /// <summary>
        /// A delegate to load <see cref="Announcement.UserGroupRef" />.
        /// </summary>
        public Func<UserGroup> DelLoadUserGroupRef = null;

        /// <summary>
        /// A delegate to load <see cref="Announcement.UserGroupRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<UserGroup> AutoLoadUserGroupRef = null;

        /// <summary>
        /// Entity in data set "Users" for <see cref="User" /> that this entity depend upon through .
        /// The corresponding foreign key set is { <see cref="Announcement.CreatedUserID" /> }.
        /// </summary>
        [DataMember]
        public User UserRef
        {
            get 
            {
                if (CreatedUserID == null)
                    return null;
                else if (_UserRef == null && AutoLoadUserRef != null)
                    _UserRef = AutoLoadUserRef();
                return _UserRef; 
            }
            set 
            { 
                _UserRef = value; 
            }
        }
        private User _UserRef = null;

        /// <summary>
        /// <see cref="Announcement.UserRef" /> is not initialized when the entity is created. Clients could call this method to load it provided a proper delegate <see cref="Announcement.DelLoadUserRef" /> was setup
        /// before calling it.
        /// </summary>
        public void LoadUserRef()
        {
            if (CreatedUserID == null || _UserRef != null)
                return;
            if (DelLoadUserRef != null)
                _UserRef = DelLoadUserRef();
        }

        /// <summary>
        /// A delegate to load <see cref="Announcement.UserRef" />.
        /// </summary>
        public Func<User> DelLoadUserRef = null;

        /// <summary>
        /// A delegate to load <see cref="Announcement.UserRef" /> automatically when it is referred to at the first time.
        /// </summary>
        public Func<User> AutoLoadUserRef = null;

#endregion

#region Entities that depend on the current one.

#endregion

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) primary key(s).
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityIdentical(Announcement other)
        {
            if (other == null)
                return false;
            if (ID != other.ID)
                return false;
            return true;
        }              

        /// <summary>
        /// Whether or not the present entity is identitical to <paramref name="other" />, in the sense that they have the same (set of) intrinsic identifiers.
        /// </summary>
        /// <param name="other">The entity to be compared to.</param>
        /// <returns>
        ///   The result of comparison.
        /// </returns>
        public bool IsEntityTheSame(Announcement other)
        {
            if (other == null)
                return false;
            else
                return ID == other.ID;
        }              

        /// <summary>
        /// Merge changes inside entity <paramref name="from" /> to the entity <paramref name="to" />. Any changes in <paramref name="from" /> that is not changed in <paramref name="to" /> is updated inside <paramref name="to" />.
        /// </summary>
        /// <param name="from">The "old" entity acting as merging source.</param>
        /// <param name="to">The "new" entity which inherits changes made in <paramref name="from" />.</param>
        /// <returns>
        /// </returns>
        public static void MergeChanges(Announcement from, Announcement to)
        {
            if (to.IsPersisted)
            {
                if (from.IsDescriptionModified && !to.IsDescriptionModified)
                {
                    to.Description = from.Description;
                    to.IsDescriptionModified = true;
                }
                if (from.IsDispOrderModified && !to.IsDispOrderModified)
                {
                    to.DispOrder = from.DispOrder;
                    to.IsDispOrderModified = true;
                }
                if (from.IsTitleModified && !to.IsTitleModified)
                {
                    to.Title = from.Title;
                    to.IsTitleModified = true;
                }
                if (from.IsExpireDateModified && !to.IsExpireDateModified)
                {
                    to.ExpireDate = from.ExpireDate;
                    to.IsExpireDateModified = true;
                }
                if (from.IsLastModifiedModified && !to.IsLastModifiedModified)
                {
                    to.LastModified = from.LastModified;
                    to.IsLastModifiedModified = true;
                }
            }
            else
            {
                to.IsPersisted = from.IsPersisted;
                to.ID = from.ID;
                to.CreatedDate = from.CreatedDate;
                to.Description = from.Description;
                to.IsDescriptionModified = from.IsDescriptionModified;
                to.DispOrder = from.DispOrder;
                to.IsDispOrderModified = from.IsDispOrderModified;
                to.Title = from.Title;
                to.IsTitleModified = from.IsTitleModified;
                to.ExpireDate = from.ExpireDate;
                to.IsExpireDateModified = from.IsExpireDateModified;
                to.LastModified = from.LastModified;
                to.IsLastModifiedModified = from.IsLastModifiedModified;
                to.ApplicationID = from.ApplicationID;
                to.CreatedUserID = from.CreatedUserID;
                to.GroupID = from.GroupID;
            }
        }

        /// <summary>
        /// Update changes to the current entity compared to an input <paramref name="newdata" /> and set the entity to a proper state for updating.
        /// </summary>
        /// <param name="newdata">The "new" entity acting as the source of the changes, if any.</param>
        /// <returns>
        /// </returns>
        public void UpdateChanges(Announcement newdata)
        {
            int cnt = 0;
            if (Description != newdata.Description)
            {
                Description = newdata.Description;
                IsDescriptionModified = true;
                cnt++;
            }
            if (DispOrder != newdata.DispOrder)
            {
                DispOrder = newdata.DispOrder;
                IsDispOrderModified = true;
                cnt++;
            }
            if (Title != newdata.Title)
            {
                Title = newdata.Title;
                IsTitleModified = true;
                cnt++;
            }
            if (ExpireDate != newdata.ExpireDate)
            {
                ExpireDate = newdata.ExpireDate;
                IsExpireDateModified = true;
                cnt++;
            }
            if (LastModified != newdata.LastModified)
            {
                LastModified = newdata.LastModified;
                IsLastModifiedModified = true;
                cnt++;
            }
            IsEntityChanged = cnt > 0;
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public void NormalizeValues()
        {
            StartAutoUpdating = false;
            if (Description == null)
                Description = "";
            if (Title == null)
                Title = "";
            if (!IsEntityChanged)
                IsEntityChanged = IsDescriptionModified || IsDispOrderModified || IsTitleModified || IsExpireDateModified || IsLastModifiedModified;
            if (IsDescriptionModified && !IsDescriptionLoaded)
                IsDescriptionLoaded = true;
            StartAutoUpdating = true;
        }

        /// <summary>
        /// Make a shallow copy of the entity.
        /// </summary>
        IDbEntity IDbEntity.ShallowCopy(bool preserveState)
        {
            return ShallowCopy(false, preserveState);
        }

        /// <summary>
        /// Internal use
        /// </summary>
        public Announcement ShallowCopy(bool allData = false, bool preserveState = false, bool checkLoadState = false)
        {
            Announcement e = new Announcement();
            e.StartAutoUpdating = false;
            e.ID = ID;
            e.CreatedDate = CreatedDate;
            e.DispOrder = DispOrder;
            if (preserveState)
                e.IsDispOrderModified = IsDispOrderModified;
            else
                e.IsDispOrderModified = false;
            e.Title = Title;
            if (preserveState)
                e.IsTitleModified = IsTitleModified;
            else
                e.IsTitleModified = false;
            e.ExpireDate = ExpireDate;
            if (preserveState)
                e.IsExpireDateModified = IsExpireDateModified;
            else
                e.IsExpireDateModified = false;
            e.LastModified = LastModified;
            if (preserveState)
                e.IsLastModifiedModified = IsLastModifiedModified;
            else
                e.IsLastModifiedModified = false;
            e.ApplicationID = ApplicationID;
            e.CreatedUserID = CreatedUserID;
            e.GroupID = GroupID;
            if (allData)
            {
                if (!checkLoadState || IsDescriptionLoaded)
                    e.Description = Description;
                if (preserveState)
                    e.IsDescriptionModified = IsDescriptionModified;
                else
                    e.IsDescriptionModified = false;
                e.IsDescriptionLoaded = IsDescriptionLoaded;
            }
            e.DistinctString = GetDistinctString(true);
            e.IsPersisted = IsPersisted;
            if (preserveState)
                e.IsEntityChanged = IsEntityChanged;
            else
                e.IsEntityChanged = false;
            e.StartAutoUpdating = true;
            return e;
        }

        /// <summary>
        /// A textual representation of the entity.
        /// </summary>
        public override string ToString()
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            sb.Append(@"
----===== [[Announcement]] =====----
  ID = '" + ID + @"'");
            sb.Append(@" (natural id)");
            sb.Append(@"
  CreatedDate = " + CreatedDate + @"
  DispOrder = " + DispOrder + @"");
            if (IsDispOrderModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  Title = '" + Title + @"'");
            if (IsTitleModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ExpireDate = " + (ExpireDate.HasValue ? ExpireDate.Value.ToString() : "null") + @"");
            if (IsExpireDateModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  LastModified = " + (LastModified.HasValue ? LastModified.Value.ToString() : "null") + @"");
            if (IsLastModifiedModified)
                sb.Append(@" (modified)");
            else
                sb.Append(@" (unchanged)");
            sb.Append(@"
  ApplicationID = '" + (ApplicationID != null ? ApplicationID : "null") + @"'
  CreatedUserID = '" + (CreatedUserID != null ? CreatedUserID : "null") + @"'
  GroupID = '" + (GroupID != null ? GroupID : "null") + @"'
");
            return sb.ToString();
        }

    }

    ///<summary>
    ///The result of an add or update of type <see cref="Announcement" />.
    ///</summary>
    [DataContract]
    [Serializable]
    public class AnnouncementUpdateResult : IUpdateResult
    {
        /// <summary>
        /// Status of add, update or delete operation
        /// </summary>
        [DataMember]
        public int OpStatus
        {
            get { return _opStatus; }
            set { _opStatus = value; }
        }
        private int _opStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// Parents or child operation status
        /// </summary>
        [DataMember]
        public int RelatedOpStatus
        {
            get { return _relatedOpStatus; }
            set { _relatedOpStatus = value; }
        }
        private int _relatedOpStatus = (int)EntityOpStatus.Unknown;

        /// <summary>
        /// The updated entity.
        /// </summary>
        [DataMember]
        public Announcement UpdatedItem
        {
            get;
            set;
        }

        /// <summary>
        /// If the relational data source has a way of detecting concurrent update conflicts, this is the item inside the
        /// data source that had been updated by other agents in between the load and update time interval of the present
        /// agent. The client software should resolve the conflict.
        /// </summary>
        [DataMember]
        public Announcement ConflictItem
        {
            get;
            set;
        }

        /// <summary>
        /// String representation of the entity.
        /// </summary>
        public string EntityInfo 
        { 
            get { return UpdatedItem == null ? "NULL" : UpdatedItem.ToString(); }
        }
    }

}
